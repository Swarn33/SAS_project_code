LIBNAME HOLDINGS "\\RESEARCH\RESEARCH\SAS - RESEARCH\SWARN_RESEARCH\SAS_DATASETS\HOLDINGS_DATA\ALL_DATASET_HOLDINGS";
LIBNAME NZD "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\Holdings_data\NZD";
LIBNAME FUND_NZD "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD";
LIBNAME FILE_SET "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\Holdings_data\NZD\OTHER_FILES";
LIBNAME FUND_SET "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files";
/* RUN ALL THE MACROS - LINE 286 */

/* HD FILES */

%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET, FINAL_DATASET);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=&OUTPUT_DATASET.;
        GETNAMES=YES;
        GUESSINGROWS=1000000;
    RUN;

	DATA &FINAL_DATASET.;
		/*LENGTH FUNDNAME $50 SECID $12 NAME $90 DETAILHOLDINGTYPE $50;		TAKING TOO MUCH SPACE*/
        SET &OUTPUT_DATASET.  ;
		FUNDNAME = COMPRESS(FUNDNAME, '', 'KW');
		FUNDID = COMPRESS(FUNDID, '', 'KW');
		SECID = COMPRESS(SECID, '', 'KW');
		NAME = COMPRESS(NAME, '', 'KW');
		DETAILHOLDINGTYPE = COMPRESS(DETAILHOLDINGTYPE, '', 'KW');
		NUMBEROFSHARES = COMPRESS(NUMBEROFSHARES, '', 'KW'); 	/* THIS IS CHARACTER */
		/* CHECK IF DATE IS CHARACTER */
        IF VTYPE(DATE) = 'C' THEN DO;
			DATE_CHAR = DATE;										/* RENAMING THE DATE VARIABLE TO BE DROPPED AFTERWARDS AND REASSIGN THE DATE VARIABLE TO NUMERIC VTYPE */
            DATE_NUM = INPUT(DATE_CHAR, DDMMYY10.); 				/* CONVERT CHARACTER DATE TO NUMERIC SAS DATE */
            DROP  DATE_CHAR; 										/* DROP CREATED CHARACTER DATE */
        END;
        /* THIS LINE IS AN EVIL NECESSITY AS DATE IF CHARACTER IS NOT GETTING RENAMED OR RECREATED AFTER DROPPING ORIGINAL DATE COLUMN */
		/* IF DATE IS NUMERIC CREATE A COLUMN DATE_NUM WHICH IS IN SYNC WITH WHOLE DATASET AND REST OF THE CODE*/
		IF VTYPE (DATE) = 'N' THEN DO;
			DATE_NUM = DATE ;
		END;
		/* EXTRACT MONTH AND YEAR FROM THE NUMERIC DATE */
		MONTH = MONTH(DATE_NUM);
        YEAR = YEAR(DATE_NUM);
		FORMAT DATE_NUM DDMMYY10. ;
		DROP DATE;
	RUN;
	/* DROPPING THE INTERMEDIATE DATASET TO FREE UP THE DISK SPACE*/
	PROC DATASETS LIB = WORK;
		DELETE &OUTPUT_DATASET.;
	QUIT;

    PROC CONTENTS DATA=&FINAL_DATASET.;
    RUN;

	PROC SORT DATA=&FINAL_DATASET. ; BY FUNDID YEAR MONTH ; 
	RUN ;

%MEND DATA_CONVERSION;

%MACRO FILE_PROCESSING ;
	 %DO I = 1 %TO 22 ; 
		%DATA_CONVERSION (
				INPUT_FILE = C:\SWARN\ESG PROJECT\CSV_DATASET\KIWISAVER_HD\FILE_HD_&I..CSV,
				OUTPUT_DATASET=LINK_FILE_&I,
				FINAL_DATASET=HD_&I
			);
	%END;
%MEND FILE_PROCESSING;

%FILE_PROCESSING ;

/* DONT RUN WITH ABOVE CODE*/

%MACRO SET_HD(START=1, END=22);
    DATA KS_HD_1TO409;
        SET	%DO I = &START %TO &END;
            	HD_&I.
       		%END;
		;
    RUN;
%MEND SET_HD;

%SET_HD(START=1, END=22);

/* MERGING BINARY FILE INTO FINAL SET*/

PROC SORT DATA = FILE_SET.binaryfile; BY FUNDID; RUN;

PROC SORT DATA = KS_HD_1TO409 OUT = HD_DATA; BY FUNDID; RUN;	/* HOLDINGS.HD_ALL_DATA */

DATA HD_ALL_DATA;
	MERGE HD_DATA (IN=A) FILE_SET.binaryfile (IN=B);
	BY FUNDID;
	IF A;
RUN;

/* CREATING FILE IN ORIGINAL LIBRARY*/

DATA HOLDINGS.HD_ALL_DATA;
	SET HD_ALL_DATA;
	WHERE NOT MISSING(FUNDID);
RUN;

/* **********************************************************************************************SD FILES************************************************************************** */

%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET, FINAL_DATASET);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=&OUTPUT_DATASET.;
        GETNAMES=YES;
        GUESSINGROWS=1000000;
    RUN;

	DATA &FINAL_DATASET.;
		/*LENGTH FUNDNAME $50 SECID $12 NAME $90;		TAKING TOO MUCH SPACE*/
        SET &OUTPUT_DATASET.  ;
		FUNDNAME = COMPRESS(FUNDNAME, '', 'KW');
		FUNDID = COMPRESS(FUNDID, '', 'KW');
		SECID = COMPRESS(SECID, '', 'KW');
		NAME = COMPRESS(NAME, '', 'KW');
		Percentholdings = COMPRESS(Percentholdings, '', 'KW'); 	/* THIS IS CHARACTER */
		/* CHECK IF DATE IS CHARACTER */
        IF VTYPE(DATE) = 'C' THEN DO;
			DATE_CHAR = DATE;										/* RENAMING THE DATE VARIABLE TO BE DROPPED AFTERWARDS AND REASSIGN THE DATE VARIABLE TO NUMERIC VTYPE */
            DATE_NUM = INPUT(DATE_CHAR, DDMMYY10.); 				/* CONVERT CHARACTER DATE TO NUMERIC SAS DATE */
            DROP  DATE_CHAR; 										/* DROP CREATED CHARACTER DATE */
        END;
        /* THIS LINE IS AN EVIL NECESSITY AS DATE IF CHARACTER IS NOT GETTING RENAMED OR RECREATED AFTER DROPPING ORIGINAL DATE COLUMN */
		/* IF DATE IS NUMERIC CREATE A COLUMN DATE_NUM WHICH IS IN SYNC WITH WHOLE DATASET AND REST OF THE CODE*/
		IF VTYPE (DATE) = 'N' THEN DO;
			DATE_NUM = DATE ;
		END;
		/* EXTRACT MONTH AND YEAR FROM THE NUMERIC DATE */
		MONTH = MONTH(DATE_NUM);
        YEAR = YEAR(DATE_NUM);
		FORMAT DATE_NUM DDMMYY10. ;
		DROP DATE;
	RUN;
	/* DROPPING THE INTERMEDIATE DATASET TO FREE UP THE DISK SPACE*/
	PROC DATASETS LIB = WORK;
		DELETE &OUTPUT_DATASET.;
	QUIT;

    PROC CONTENTS DATA=&FINAL_DATASET.;
    RUN;

	PROC SORT DATA=&FINAL_DATASET. ; BY FUNDID YEAR MONTH ; 
	RUN ;

%MEND DATA_CONVERSION;

%MACRO FILE_PROCESSING ;
	 %DO I = 1 %TO 23 ; 
		%DATA_CONVERSION (
				INPUT_FILE = C:\SWARN\ESG Project\CSV_dataset\Kiwisaver_sd\FILE_SD_&I..CSV,
				OUTPUT_DATASET=LINK_FILE_&I,
				FINAL_DATASET=SD_&I
			);
	%END;
%MEND FILE_PROCESSING;

%FILE_PROCESSING ;

/* DONT RUN WITH ABOVE CODE - FIRST TEST THE DATA */

%MACRO SET_SD(START=1, END=23);
    DATA KS_SD_1TO409;
        SET	%DO I = &START %TO &END;
            	SD_&I.
       		%END;
		;
    RUN;
%MEND SET_SD;

%SET_SD(START=1, END=23);

/* ***********************************************************************************CREATING FILE IN ORIGINAL LIBRARY*************************************************************************************************** */

PROC SORT DATA = FILE_SET.binaryfile; BY FUNDID; RUN;

PROC SORT DATA = KS_SD_1TO409 OUT = SD_DATA; BY FUNDID; RUN;	

DATA SD_ALL_DATA;
	MERGE SD_DATA (IN=A)	FILE_SET.binaryfile (IN=B);
	BY FUNDID;
	IF A;
RUN;

/* CREATING FILE IN ORIGINAL LIBRARY*/

DATA HOLDINGS.SD_ALL_DATA;
	SET SD_ALL_DATA;
	WHERE NOT MISSING(FUNDID);
RUN;

/* ********************************************************** CODE FOR EXTRACTING UNIQUE NAME FROM CORRESPONDING UNIQUE SECID ******************************************************************************* */
/* THE OBJECTIVE OF THE CODE IS TO GET A COMMON NAME OF SECID AS USED BY FUNDS - WITHIN DATA A SECID IS NAMED DIFFERENTLY BY DIFFERENT FUNDS, 
	THE CODE WILL CREATE A UNIQUE NAME TILL THIRD PLACE OT WORD OF THE STRING SO THAT EACH SECID HAVE A COMMON NAME*/

/* CREATING TEMP DATASET */

DATA HD_ALL_DATA;
	SET HOLDINGS.HD_ALL_DATA;
RUN;

DATA SD_ALL_DATA;
	SET HOLDINGS.SD_ALL_DATA;
RUN;

/*MAIN CODE */

%MACRO SECID_NAME_EXTRACTION(INPUT_FILE, OUTPUT_FILE);

	PROC SQL;
		CREATE TABLE LINK_FILE_1 AS
		SELECT DISTINCT SECID, NAME
		FROM &INPUT_FILE
		WHERE NOT MISSING(SECID);
	QUIT;

	/* BREAKING DOWN THE NAME STRING INTO THREE PARTS TO BE ABLE TO PICK UP THE COMMON WORDS */

	DATA LINK_FILE_2;
		SET LINK_FILE_1;
		LENGTH FIRST_WORD $200 SECOND_WORD $200 THIRD_WORD $200 ;	/*INITIALIZING TWO STRING VARIABLES WITH DEFINED VARIABLES*/
		FIRST_WORD = "";			/*INITIALIZING THE MAIN RESULT STRING*/
		SECOND_WORD = "";
		THIRD_WORD = "";
		FIRST_WORD = COMPRESS(LOWCASE(SCAN(NAME, 1, ' ')), '.,-:');
		SECOND_WORD = COMPRESS(LOWCASE(SCAN(NAME, 2, ' ')), '.,-:');
		THIRD_WORD = COMPRESS(LOWCASE(SCAN(NAME, 3, ' ' )), '.,-:');
	RUN;

	/* IF SECID IS SAME AND FIRST WORD AND SECOND WORD IS SAME, THEN PICK UP THOSE DISTINCT VALUES IN A DATASET */

	/* DROP NAME COLUMN SO THAT UNIQUE SEARCH CAN BE RAN IN THAT */

	DATA LINK_FILE_3;
		SET LINK_FILE_2;
		DROP NAME;
	RUN;

	PROC SQL;
		CREATE TABLE LINK_FILE_4 AS
		SELECT DISTINCT SECID, FIRST_WORD, SECOND_WORD, THIRD_WORD
		FROM LINK_FILE_3;
	QUIT;

	PROC SORT DATA = LINK_FILE_4; BY SECID; RUN;

	DATA &OUTPUT_FILE.;
		SET LINK_FILE_4;
		BY SECID;

		RETAIN COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3;
		LENGTH COMBINED_NAME_1 $200 COMBINED_NAME_2 $200 COMBINED_NAME_3 $200;

		IF FIRST.SECID THEN DO;
			COMBINED_NAME_1 = FIRST_WORD;
			COMBINED_NAME_2 = SECOND_WORD;
			COMBINED_NAME_3 = THIRD_WORD;
		END;
		ELSE DO;
			COMBINED_NAME_1 = CATX(' OR ', COMBINED_NAME_1, FIRST_WORD);
			COMBINED_NAME_2 = CATX(' OR ', COMBINED_NAME_2, SECOND_WORD);
			COMBINED_NAME_3 = CATX(' OR ', COMBINED_NAME_3, THIRD_WORD);
		END;
		IF LAST.SECID THEN OUTPUT;
		DROP FIRST_WORD SECOND_WORD THIRD_WORD;
	RUN;

	/*PROC DATASET LIBNAME = WORK;
		DELETE LINK_FILE_1 LINK_FILE_2 LINK_FILE_3 LINK_FILE_4 ;
	RUN;*/

%MEND SECID_NAME_EXTRACTION;

%SECID_NAME_EXTRACTION(INPUT_FILE = HD_ALL_DATA, OUTPUT_FILE = SECID_HD_DATA);

%SECID_NAME_EXTRACTION(INPUT_FILE = SD_ALL_DATA, OUTPUT_FILE = SECID_SD_DATA);

/* MERGE GENERAL MACRO */
%MACRO MERGE_CODE_1(INPUT_FILE_1, INPUT_FILE_2, SORT_VARS, OUTPUT_FILE);	
	PROC SORT DATA = &INPUT_FILE_1. OUT = LINK_FILE; BY &SORT_VARS.; RUN;
	PROC SORT DATA = &INPUT_FILE_2.; BY &SORT_VARS.; RUN;

	DATA &OUTPUT_FILE.;
		MERGE LINK_FILE (IN=A) &INPUT_FILE_2. (IN=B);
		BY &SORT_VARS.;
		IF A;
	RUN;
	
	PROC DATASETS LIB = WORK;		/*DELETING INTERMEDIARY DATASET FOR SPACE MANAGEMENT*/
		DELETE LINK_FILE;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT;
%MEND MERGE_CODE_1;

/* RIC_CODE WILL ACT AS AN IDENTIFIER IN MERGING DATA FROM REFINITIV */	
/* MERGING RIC_CODE FILE - RIC_CODE IS THE PRIMARY KEY IN DATA DOWNLOADED FROM REFINITIV */
/* IMPORT MACRO 1 */
%MACRO IMPORT_MACROS(INPUTFILE, OUTPUT_FILE);
	FILENAME REFFILE "&INPUTFILE.";  

	    PROC IMPORT DATAFILE=REFFILE
	        DBMS=CSV
	        REPLACE
	        OUT=&OUTPUT_FILE.;
	        GETNAMES=YES;
	        GUESSINGROWS=33000;
	    RUN;

	    PROC CONTENTS DATA = &OUTPUT_FILE.; RUN;
%MEND IMPORT_MACROS;

/* IMPORT MACRO 2 - FOR STATA DATASET */
%MACRO IMPORT_MACRO(INPUT_FILE, DBMS_TYPE, OUTPUT_DATASET);

	FILENAME REFFILE "&INPUT_FILE.";
		OPTIONS MSGLEVEL=I;			/* RUN V9 ENGINE OPTIONS IF REQURED */

	    PROC IMPORT DATAFILE=REFFILE
	        DBMS=&DBMS_TYPE.
	        OUT=&OUTPUT_DATASET.;
	    RUN;

%MEND IMPORT_MACRO;

/* PROC SUMMARY MACRO */
/* PROC SUMMARY MACRO 1 */
%MACRO PROC_SUMMARY_OVERALL(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. &STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_OVERALL;

/* PROC SUMMARY MACRO 2 */
%MACRO PROC_SUMMARY_KIWISAVER(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE BINARYVAR = 1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. &STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_KIWISAVER;

/* PROC SUMMARY MACRO 3 */
%MACRO PROC_SUMMARY_ESG1(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA=&INPUT_FILE. NWAY MISSING ;					
		WHERE ESG =1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT = &OUTPUT_FILE. 
		&STATS_OPS.(&VARIABLES.) = &CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_ESG1;

/* PROC SUMMARY MACRO 4 */
%MACRO PROC_SUMMARY_WEIGHT(INPUT_FILE, WEIGHT_VAR, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
    PROC SUMMARY DATA=&INPUT_FILE. NWAY MISSING;					
		WEIGHT &WEIGHT_VAR.;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. 
		&STATS_OPS.(&VARIABLES.) = &CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_WEIGHT;

/* PROC SUMMARY MACRO 5 */
%MACRO PROC_SUMMARY_OPENEND(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE BINARYVAR = 3;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. &STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_OPENEND;

/* MACRO TO CREATE CARRY FORWARD VARIABLES */
%MACRO CREATE_FORWARD_VAR(INPUT_FILE, SORT_VARS, OUTPUT_FILE, VAR_TOBE_CARRY, FILTER_VAR);
	PROC SORT DATA = &INPUT_FILE.; BY &SORT_VARS.; RUN;
	DATA &OUTPUT_FILE.;
		SET &INPUT_FILE.;
		BY &SORT_VARS.;
		TEMP_LAG_VAR = LAG(&VAR_TOBE_CARRY.);	
		IF FIRST.&FILTER_VAR. THEN &VAR_TOBE_CARRY._FRWRD = .;
		ELSE &VAR_TOBE_CARRY._FRWRD = TEMP_LAG_VAR;
		DROP TEMP_LAG_VAR;
	RUN;

%MEND CREATE_FORWARD_VAR;


/* ********************************************************************* IMPORTING RICCODE FILES ******************************************************************************** */ 
/* IMPORTING RICCODE FILE. */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\ric_code_refinitiv.CSV',
			   OUTPUT_FILE=RIC_CODE_IMPORT);

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\ISIN_DATA.CSV',
 			   OUTPUT_FILE=ISIN_DATA_IMPORT);

%MERGE_CODE_1(INPUT_FILE_1=RIC_CODE_IMPORT, INPUT_FILE_2=ISIN_DATA_IMPORT, SORT_VARS=ISIN, OUTPUT_FILE=RIC_CODE);

/* REMOVING DUPLICATE VALUES BY SECID */
PROC SORT DATA = FILE_SET.RIC_CODE OUT  = RIC_CODE NODUPKEY; BY SECID;  RUN;

/* MAKING FINAL DATASETS IN LIBRARY */
DATA FILE_SET.RIC_CODE;
	SET RIC_CODE;
	WHERE NOT MISSING(SECID);
RUN;

/* CHANGING DATES IN HEADER COLUMNS AND TRANSPOSE THE RETURNS */

%MACRO TRANSPOSE_GEN_MACROS(INPUTFILE, PREFIX, OUTPUT_FILE);

    FILENAME REFFILE "&INPUTFILE.";  /* "C:\Users\em18921\Documents\ESG_NZ_DATA_Excel\Monthlyreturns_5.csv"; */

    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=MAIN_FILE;
        GETNAMES=YES;
        GUESSINGROWS=30000;
    RUN;

    PROC CONTENTS DATA = MAIN_FILE; RUN;
	DATA MAIN_FILE_1;
		SET MAIN_FILE;
		DROP &VAR_NAME.;
	RUN;

    PROC SQL NOPRINT; /* Counting total number of rows and putting columns in a list */
        SELECT NAME
        INTO :COL_NAMES SEPARATED BY ' '
        FROM DICTIONARY.COLUMNS
        WHERE LIBNAME = "WORK" AND 
              MEMNAME = "MAIN_FILE_1" AND 
              NAME LIKE '%_%' AND NOT NAME="RICCODE"; /* '_%_%_' for monthlyreturns */
    QUIT;

    %PUT COLUMN NAMES: &COL_NAMES;
    %LET NUM_VARS = %SYSFUNC(COUNTW(&COL_NAMES));
    %PUT NUMBER OF VARIABLES: &NUM_VARS;

    PROC SORT DATA = MAIN_FILE_1; BY RICCODE; RUN;

     /* Step 2: Transpose */
    PROC TRANSPOSE DATA=MAIN_FILE_1
        OUT=LINK_FILE_1
        PREFIX=&PREFIX.;
        BY RICCODE;
        VAR &COL_NAMES.;
    RUN;

    DATA LINK_FILE_2;
        SET LINK_FILE_1;
        YEAR = SCAN(_NAME_, 2, '_')*1;	 /*DATE = SCAN(_NAME_, 1, '_')*1	MONTH = SCAN(_NAME_, 2, '_')*1; */
        DROP _NAME_;
    RUN;
    PROC SORT DATA = LINK_FILE_2; BY RICCODE YEAR; RUN;		/*MONTH*/
	
	DATA &OUTPUT_FILE.;
		SET LINK_FILE_2(RENAME=(&PREFIX.1=&PREFIX.));
		DROP &PREFIX.2 &PREFIX.3;
	RUN;

    /* DATA LINK_FILE_3;
        SET LINK_FILE_2;
        RETURNS = INPUT(MONTHLYRETURNS1, BEST32.);
        DROP MONTHLYRETURNS2-MONTHLYRETURNS6;
    RUN;

    DATA OUTPUT_FILE_&I.;
        SET LINK_FILE_3;
        WHERE RETURNS NE .;
    RUN; 

    PROC DATASETS LIBNAME = WORK;
        DELETE LINK_FILE_1 LINK_FILE_2 LINK_FILE_3;
    RUN;*/

%MEND TRANSPOSE_GEN_MACROS;

/* *************************************MONTHLYRETURNS PROCESSING ******************************************* */
%MACRO REFINITIV_FILES;
    %DO I = 1 %TO 5; 		/* OUTPUT_FILE = CHANGE THIS TO MONTHLYRETURNS_1 */
        %TRANSPOSE_GEN_MACROS(
            INPUTFILE = C:\Users\em18921\Documents\ESG_NZ_DATA_Excel\Monthlyreturns_&I..csv,
			PREFIX=MONTHLYRETURNS );	/* FOR OUTPUT FILE WRITE MONTHLYRETURNS_&I */
    %END;
%MEND REFINITIV_FILES;

%REFINITIV_FILES;

/* **********************************MACRO FOR ALL OTHER DATASET******************************************* */
%MACRO SECID_DATA(VAR_ARRAY);
	%LOCAL I VAR_NAME;								/* CREATING TWO LOCAL VARIABLES I AND VAR_NAME */
	%LET NUM_VARS = %SYSFUNC(COUNTW(&VAR_ARRAY));	/* CREATING MACRO VARIABLE NUM_VARS WHICH COUNTS THE NUMBER OF VARIABLES OR WORDS PRESENT IN VAR_ARRAY VARIABLE */

	%DO I = 1 %TO &NUM_VARS;						/* CREATING A DYNAMIC DO LOOP WHICH DEPENDS ON THE NUMBER OF VARIABLES PRESENT IN THE VAR_ARRAY */
		%LET VAR_NAME = %SCAN(&VAR_ARRAY, &I);		/* CREATING MACRO VARIABLE VAR_NAME WHICH GETS THE NAME OF THE VARIABLE FROM VAR_ARRAY */
		%TRANSPOSE_GEN_MACROS (
						   INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\REFINITIV_FILE_&I..CSV',
						   PREFIX=&VAR_NAME,
						   OUTPUT_FILE=&VAR_NAME
						   );
	%END;
%MEND SECID_DATA;		

%LET VAR_ARRAY = ESG_SCORE	ESG_CONTROVERSY;  /* HQ_COUNTRY	ISO_CODE_NZD	BUSINESS_SECTOR	 CREATING VAR_ARRAY WITH VARIABLE NAME FOR FILE NAMING SYSTEM */
%SECID_DATA(&VAR_ARRAY);

/* MERGING ABOVE DATASETS */
%MACRO SET_SD(START=1, END=5);
    DATA MONTHLYRETUNRS_FINAL;
        SET	%DO I = &START %TO &END;
            	OUTPUT_FILE_&I.
       		%END;
		;
    RUN;
%MEND SET_SD;
%SET_SD(START=1, END=5);

/* MERGING DATASETS WITH SECID AND ISIN */
%MERGE_CODE_1(INPUT_FILE_1=MONTHLYRETUNRS_FINAL, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=MONTHLYRETURNS_2);
%MERGE_CODE_1(INPUT_FILE_1=ESG_SCORE, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=FILE_SET.ESG_SCORE);
%MERGE_CODE_1(INPUT_FILE_1=ESG_CONTROVERSY, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=FILE_SET.ESG_CONTROVERSY);

/* CREATING DATASET IN THE MAIN LIBRARY */
DATA FILE_SET.MONTHLYRETURNS_DATA;	
	SET MONTHLYRETURNS_2(RENAME=(RETURNS=monthlyreturns));
	DROP MONTHLYRETURNS1 DATE;
RUN;

/* MERGING WITH MAIN DATASET */
PROC SORT DATA = FILE_SET.ESG_SCORE; BY SECID YEAR; RUN;
PROC SORT DATA = FILE_SET.ESG_CONTROVERSY; BY SECID YEAR; RUN;
DATA FILE_30;
	MERGE FILE_SET.ESG_SCORE FILE_SET.ESG_CONTROVERSY;
	BY SECID YEAR;
RUN;

/* PUTTING MONTHLY VALUES */
DATA TEST_FILE ;
    SET FILE_30;
    BY SECID YEAR;
    ARRAY MONTHS[12] _TEMPORARY_ (1 2 3 4 5 6 7 8 9 10 11 12);
    DO I = 1 TO 12;
        MONTH = MONTHS[I];
        OUTPUT;
    END;
    DROP I;
RUN;

PROC SORT DATA = TEST_FILE; BY SECID YEAR MONTH; RUN;
PROC SORT DATA = FILE_SET.MONTHLYRETURNS_DATA; BY SECID YEAR MONTH; RUN;
DATA FILE_SET.REFINITIV_ALL_DATA;
	MERGE TEST_FILE FILE_SET.MONTHLYRETURNS_DATA;
	BY SECID YEAR MONTH;
	WHERE NOT MISSING(SECID);
RUN;

/* MERGING REFINITIV DATA WITH MAIN DATASET */
/* CREATE TEMPORARY DATASETS BEFORE RUNNING THESE CODES IF DATASETS ARE STORED IN DRIVE AS IT CAN TAKE LOT OF TIME */
%MERGE_CODE_1(INPUT_FILE_1=HOLDINGS.HD_ALL_DATA, INPUT_FILE_2=FILE_SET.REFINITIV_ALL_DATA, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=HD_ALL_DATA);

%MERGE_CODE_1(INPUT_FILE_1=HOLDINGS.SD_ALL_DATA, INPUT_FILE_2=REFINITIV_ALL_DATA, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=SD_ALL_DATA);

/*FUND LEVEL MERGE */
%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET_12, OUTPUT_DATASET, PREFIX);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV REPLACE
        OUT=&OUTPUT_DATASET_12.;
        GETNAMES=YES;
        GUESSINGROWS=750;
    RUN;

    PROC SORT DATA=&OUTPUT_DATASET_12.;
        BY FUNDID;
    RUN;

    PROC CONTENTS DATA=&OUTPUT_DATASET_12. OUT=content(keep=name);
    RUN;

    PROC SQL noprint;
        SELECT name INTO :varlist separated by ' '
        FROM content
        WHERE name LIKE 'date_%';
    QUIT;

    PROC TRANSPOSE DATA=&OUTPUT_DATASET_12.
        OUT=&OUTPUT_DATASET.
        PREFIX=&PREFIX.;
        BY FUNDID;
        VAR &varlist.;
    RUN;

    /* Convert character values to numeric */
    DATA &OUTPUT_DATASET.;
        SET &OUTPUT_DATASET.;
        ARRAY value_vars{*} &PREFIX.1:;  /* Array of variables starting with PREFIX */
        DO i = 1 TO DIM(value_vars);
            IF VTYPE(value_vars{i}) = 'C' THEN value_vars{i} = INPUT(COMPRESS(value_vars{i}, ','), BEST32.);
        END;
        MONTH = SCAN(_NAME_, 2, '_')*1;
        YEAR = SCAN(_NAME_, 3, '_')*1;
        DROP _NAME_ i;
    RUN;

    PROC CONTENTS DATA=&OUTPUT_DATASET.;
    RUN;
%MEND DATA_CONVERSION;

/* Call to the macro */
%DATA_CONVERSION(
    INPUT_FILE='C:\Users\em18921\Documents\netasset_NZD.csv',
    OUTPUT_DATASET_12=netasset_nzd_12,
    OUTPUT_DATASET=netasset_nzd,
    PREFIX=Netasset_NZD
	);

%DATA_CONVERSION(
    INPUT_FILE='C:\Users\em18921\Documents\monthlyreturn_NZD.csv',
    OUTPUT_DATASET_12=fundreturns_nzd_12,
    OUTPUT_DATASET=fundreturns_nzd,
    PREFIX=Fundreturns_NZD	);

/* FUNDLEVEL DATASET */
PROC SORT DATA = NETASSET_NZD; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDRETURNS_NZD; BY FUNDID YEAR MONTH; RUN;
DATA TEST_987;
	MERGE NETASSET_NZD FUNDRETURNS_NZD;
	BY FUNDID YEAR MONTH;
	Netasset_NZD = Netasset_NZD1*1;
	DROP Netasset_NZD1;
RUN;

/* MERGING FUNDLEVLE DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=HD_ALL_DATA, INPUT_FILE_2=TEST_987, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=HD_ALL_DATA_12);

%MERGE_CODE_1(INPUT_FILE_1=SD_ALL_DATA, INPUT_FILE_2=TEST_987, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=SD_ALL_DATA_12);

/* MAKING FINAL DATASET */

DATA HOLDINGS.HD_ALL_DATA;
	SET HD_ALL_DATA_12;
RUN;

DATA HOLDINGS.NZD_DATASET_AUM;
	SET SD_ALL_DATA_12;
RUN;

/* CREATING VARIABLES IN HOLDINGS DATASET */
DATA SD_ALL_DATA_12;
    SET SD_ALL_DATA_12(RENAME=(Netasset_NZD=Netassets_NZD));
RUN;

DATA HOLDINGS_ESG_FUND;
	SET SD_ALL_DATA_12;
	STOCK_WEIGHT_DECIMAL = PERCENTHOLDINGS/100;
	DECOMPOSED_STK_RET = STOCK_WEIGHT_DECIMAL *Fundreturns_NZD1;/* FUND RETURNS IS IN PERCENTAGE */
	CAPITAL_INVESTED_PER_HOLDING = STOCK_WEIGHT_DECIMAL * Netassets_NZD;	 
	IF ESGSCORE NE . THEN ESG = 1; 
	ELSE ESG = 0;
	 YY_MON = INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
    FORMAT YY_MON YYMON7.; /* FORMAT THE NEW DATE VARIABLE */
RUN;

/* STEP (1.4)  :  ADDING LIQUIDITY DATA IN THE ABOVE DATASET.*/
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Liquidated_info.csv',
			   OUTPUT_FILE=NZD.LIQUIDATED_INFO);

DATA LIQUIDATED_INFO;
SET NZD.LIQUIDATED_INFO;
 	LIQ_YR_MON = INTNX('MONTH', MDY(LIQ_MONTH, 1, LIQ_YEAR), 0);
    FORMAT LIQ_YR_MON YYMON7.; /* FORMAT THE NEW DATE VARIABLE */
	IF LIQ_YR_MON NE . THEN LIQUIDATED = 1;
	ELSE LIQUIDATED = 0;
RUN;

PROC SORT DATA = HOLDINGS_ESG_FUND; BY FUNDID ; RUN;

PROC SORT DATA = LIQUIDATED_INFO; BY FUNDID; RUN;

DATA HOLDINGS_LIQ;
	MERGE HOLDINGS_ESG_FUND(IN=A) LIQUIDATED_INFO(IN=B);
	BY FUNDID;
	IF A;
    IF LIQUIDATED = 1 AND YY_MON < LIQ_YR_MON THEN ALIVE = 1;
	ELSE ALIVE = 0;
	IF LIQ_YR_MON = . THEN ALIVE = 1;
RUN;

/* STEP (1.5)  :  FILTERING DATASETS 1) FROM JULY 2007 TO DECEMBER 2022. 2) EXCLUDING DATAPOINTS WHICH DONT HAVE NETASSETS VALUES IN FINAL DATASET*/
			  /*THE DATASET OBTAINED IS FINAL DATASET*/
DATA NZD_SD_ALL_FINAL;		/*MAIN DATASET*/
    SET HOLDINGS_LIQ; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 12); 
		IF FUNDID NE " " ;
RUN;

DATA HOLDINGS.NZD_TOTAL_AUM;			 
	SET NZD_SD_ALL_FINAL;
	IF Netassets_NZD NE . ;
RUN;

/*---------------------------------------------------------------------DATA TEST-----------------------------------------------------------------------------------------------------*/
PROC SORT DATA = HOLDINGS.NZD_TOTAL_AUM OUT = NZD_TOTAL_AUM; BY FUNDID YEAR MONTH; RUN;

PROC CONTENTS DATA = NZD_TOTAL_AUM; RUN;

/* CHECKING FOR YEAR AND MONTH NULL VALUES ENTRIES */
DATA TEST;
	SET  NZD_TOTAL_AUM;
	IF YEAR = . OR MONTH = .;
RUN;

/* CHECKING DISTINCT YEAR AND MONTH */
PROC SQL;
	CREATE TABLE TEST_12 AS
	SELECT DISTINCT YEAR, MONTH
	FROM NZD_TOTAL_AUM;
QUIT;

/* CHECKING FOR DISTINCT FUNDID IN THE DATASET */
PROC SQL;
	CREATE TABLE FUNDID AS
	SELECT DISTINCT FUNDID
	FROM SET_1;
QUIT;

PROC SQL;
	CREATE TABLE ASSETS_1 AS
	SELECT *
	FROM SET_1
	WHERE FUNDRETURNS_NZD1 NE . ;
QUIT;

/*-----------------------------------------------------------------------------STEP 2------------------------------------------------------------------------------------------------*/
/*--------------------------------------------------------CREATING SECOND DATASET - HD DATA SET--------------------------------------------------------------------------------------*/

/* STEP (2.1)  :  MERGING ALL HD DATASET OF KIWISAVER AND NZ OPEN TOGETHER.*/
PROC SORT DATA = HOLDINGS.HD_ALL_DATA OUT = HD_ALL_DATA; BY FUNDID YEAR MONTH; RUN;

DATA HD_ALL_DATA;
	SET HD_ALL_DATA(RENAME=(Netasset_NZD=Netassets_NZD ESG_SCORE=esgscore));
RUN;

DATA HOLDINGS_DATA;
	SET HD_ALL_DATA;
	BY FUNDID YEAR MONTH; 
	IF ESGSCORE NE . THEN ESG = 1; 
	ELSE ESG = 0;
	 YY_MON = INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
    FORMAT YY_MON YYMON7.; 							/* FORMAT THE NEW DATE VARIABLE */
RUN;

/*STEP  (2.4)  :  FILTERING THE ABOVE DATASET FROM JULY 2007 TO DECEMBER 2022. FILTERING DATASET ON NON MISSING NETASSETS VALUES.*/
DATA HD_ALL_123;								
    SET HOLDINGS_DATA; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 12); 
		IF FUNDID NE " ";
RUN;

DATA HOLDINGS.NZD_HD_ALL_FINAL;							/*MAIN DATASET TO BE USED IN STOCKS CALCULATIONS BUT CHECK FOR MISSING FUNDRETURNS AND NETASSETS*/
	SET HD_ALL_123;
	IF NETASSETS_NZD NE . ;
RUN;

/*--------------------------------------------------------------------- STEP 3 : FUNDRETURNS CALS-----------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF ESG VW FUND RETURNS FOR FUND PORTFOLIO---------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF NON ESG VW FUND RETURNS FOR FUND PORTFOLIO-----------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF EQUAL WEIGHTED AVG FUND RETURNS----------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF VALUE WEIGHTED AVG FUND RETURNS-------------------------------------------------------------------------------------------*/

/* STEP  (3.1)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_TOTAL_AUM NWAY MISSING;
	WHERE ESG = 1 AND  MONTHLYRETURNS NE . ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = ESG_RETURNS_VW MEAN (MONTHLYRETURNS) = VW_ESG_RETURNS;
RUN;

/* STEP (3.2)  :  CALCULATING VALUE WEIGHTED NON ESG FUND RETURN PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_TOTAL_AUM NWAY MISSING ;
	WHERE ESG = 0 AND  MONTHLYRETURNS NE . ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = NON_ESG_RETURNS_VW MEAN (MONTHLYRETURNS) = VW_NON_ESG_RETURNS;
RUN;

/* STEP (3.3)  :  MERGING ESG_RETURNS_VW AND NON_ESG_RETURNS_VW DATASETS */
PROC SORT DATA = ESG_RETURNS_VW ;
	BY FUNDID YEAR MONTH ;
RUN;

PROC SORT DATA = NON_ESG_RETURNS_VW ;
	BY FUNDID YEAR MONTH ;
RUN;

DATA TOTAL_FUNDRETURNS;
	MERGE ESG_RETURNS_VW ( IN = A ) NON_ESG_RETURNS_VW ( IN = B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_ ; 
RUN;

/* STEP  (3.4)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN DECOMPOSED PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_TOTAL_AUM NWAY MISSING;
	WHERE ESG = 1 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_ESG_RETURNS_DECOMP;
RUN;

/* STEP (3.5)  :  CALCULATING VALUE WEIGHTED NON ESG FUND RETURN DECOMPOSED PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_TOTAL_AUM NWAY MISSING ;
	WHERE ESG = 0 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_NON_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_NON_ESG_RETURNS_DECOMP;
RUN;

PROC SUMMARY DATA = NZD_DATASEY_FINAL NWAY MISSING ;
	WHERE ESG = 0 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_NON_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_NON_ESG_RETURNS_DECOMP;
RUN;


/* STEP (3.6)  :  MERGING VW_ESG_RETURNS_DECOMP AND VW_NON_ESG_RETURNS_DECOMP DATASETS */
PROC SORT DATA = VW_ESG_RETURNS_DECOMP ;
	BY FUNDID YEAR MONTH ;
RUN;

PROC SORT DATA = VW_NON_ESG_RETURNS_DECOMP ;
	BY FUNDID YEAR MONTH ;
RUN;

DATA TOTAL_FUNDRETURNS_DECOMP;
	MERGE VW_ESG_RETURNS_DECOMP ( IN = A ) VW_NON_ESG_RETURNS_DECOMP ( IN = B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_ ; 
RUN;

/* STEP (3.7)  :  CALCULATING FUNDRETURNS_NEW_VAL  BY ADDING ESG_RETURNS_VW AND NON_ESG_RETURNS_VW */
DATA FUDRETURNS_NEW;
    MERGE 	TOTAL_FUNDRETURNS (IN = A)	TOTAL_FUNDRETURNS_DECOMP (IN = B) ;
	BY FUNDID YEAR MONTH;
    FUNDRETURNS_VW = SUM(VW_ESG_RETURNS, VW_NON_ESG_RETURNS);
	FUNDRETURNS_VW_DECOMP = SUM(VW_ESG_RETURNS_DECOMP, VW_NON_ESG_RETURNS_DECOMP) ;
RUN;

/* STEP (3.8) :  MERGING FUNDRETURNS_NEW DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=nzd_total_aum, INPUT_FILE_2=FUDRETURNS_NEW, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.9) :  CALCULATING AVERAGE EQUAL WEIGHTED RETURN PER MONTH PER YEAR FOR THE NZD_TOTAL_AUM DATASET */
PROC SQL;
	CREATE TABLE RETURNS_MORNINGSTAR AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1, Netassets_NZD, BINARYVAR, FUNDRETURNS_VW_DECOMP
	FROM NZD_TOTAL_AUM
	WHERE NOT MISSING (Fundreturns_NZD1) ;
QUIT;

/* STEP (3.7) : CALCULATING AVERAGE EQUAL WEIGHTED FUNDRETURNS FOR OVERALL DATA*/
%PROC_SUMMARY_OVERALL(INPUT_FILE=RETURNS_MORNINGSTAR, CLASS_VARS=YEAR MONTH, VARIABLES=FUNDRETURNS_NZD1, OUTPUT_FILE=RETURNS_EW_MS, STATS_OPS=MEAN, CALCULATED_VAR=FUNDRETURNS_NZD1_AVG);

/* STEP (3.8) : MERGING MONTH YEAR DATA WITH NZD_TOTAL_AUM */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=RETURNS_EW_MS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.9) : CALCULATING AVERAGE EQUAL WEIGHTED FUNDRETURNS FOR KIWISAVER FUNDS ACROSS MONTH AND YEAR */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=RETURNS_MORNINGSTAR, CLASS_VARS=YEAR MONTH, VARIABLES=Fundreturns_NZD1, OUTPUT_FILE=KS_RETURNS_EW_MS, STATS_OPS=MEAN, CALCULATED_VAR=KS_Fundreturns_NZD1_AVG);

/* STEP (3.10) : MERGING MONTH YEAR DATA WITH NZD_TOTAL_AUM */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=KS_RETURNS_EW_MS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP  (3.11) : CALCULATING AVERAGE VALUE WEIGHTED RETURN PER MONTH PER YEAR */							 	 
%PROC_SUMMARY_OVERALL(INPUT_FILE=RETURNS_MORNINGSTAR, CLASS_VARS=YEAR MONTH, VARIABLES=FUNDRETURNS_VW_DECOMP, OUTPUT_FILE=FUNDRETURNS_VW, STATS_OPS=MEAN, CALCULATED_VAR=Fundreturns_NZD1_AVG_VW);

/* STEP (3.12)  :  MERGING THE ABOVE DATA WITH NZD_TOTAL_AUM */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=FUNDRETURNS_VW, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.13) : CALCULATING AVERAGE VALUE WEIGHTED RETURN FOR KIWISAVER DATA PER MONTH PER YEAR */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=RETURNS_MORNINGSTAR, CLASS_VARS=YEAR MONTH, VARIABLES=FUNDRETURNS_VW_DECOMP, OUTPUT_FILE=KS_FUNDRETURNS_VW, STATS_OPS=MEAN, CALCULATED_VAR=KS_Fundreturns_NZD1_AVG_VW);

/* STEP (3.14)  :  MERGING THE ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=KS_FUNDRETURNS_VW, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.15) : CREATING DISTINCT DATASET TO CREATE VALUE WEIGHTED ESG AND NON ESG RETURNS */
PROC SQL;	
	CREATE TABLE RETURNS_ESG_NONESG AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, VW_ESG_RETURNS_DECOMP, VW_NON_ESG_RETURNS_DECOMP, NETASSETS_NZD, BINARYVAR
	FROM NZD_TOTAL_AUM;
QUIT;

/* STEP (3.16) : OVERALL DATA - CALCULATING AVERAGE VALUE WEIGHTED ESG RETURN ACROSS MONTH AND YEAR */
%PROC_SUMMARY_OVERALL(INPUT_FILE=RETURNS_ESG_NONESG, CLASS_VARS=YEAR MONTH, VARIABLES=VW_ESG_RETURNS_DECOMP, OUTPUT_FILE=VW_ESG_RETURNS, STATS_OPS=MEAN, CALCULATED_VAR=AVG_VW_ESG_RETURNS_DECOMP);

/* STEP (3.17) - MERGING ABOVE DATASET WITH TOTAL.DATASET.FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=VW_ESG_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.18) : KIWISAVER - CALCULATING AVERAGE VALUE WEIGHTED RETURN ESG RETURN ACROSS MONTH AND YEAR */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=RETURNS_ESG_NONESG, CLASS_VARS=YEAR MONTH, VARIABLES=VW_ESG_RETURNS_DECOMP, OUTPUT_FILE=KS_VW_ESG_RETURNS, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_VW_ESG_RET_DECOMP);

/* STEP (3.19) - MERGING ABOVE DATASET WITH TOTAL.DATASET.FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=KS_VW_ESG_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.20) : OVERALL DATA - CALCULATING AVERAGE VALUE WEIGHTED NONESG RETURN ACROSS MONTH AND YEAR */
%PROC_SUMMARY_OVERALL(INPUT_FILE=RETURNS_ESG_NONESG, CLASS_VARS=YEAR MONTH, VARIABLES=VW_NON_ESG_RETURNS_DECOMP, OUTPUT_FILE=AVG_VW_NON_ESG_RETURNS, STATS_OPS=MEAN, CALCULATED_VAR=AVG_VW_NON_ESG_RET_DECOMP);

/* STEP (3.21) - MERGING ABOVE DATASET WITH NZD TOTAL AUM */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=AVG_VW_NON_ESG_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.22) : KIWISAVER DATA - CALCULATING AVERAGE VALUE WEIGHTED NONESG RETURN ACROSS MONTH AND YEAR */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=RETURNS_ESG_NONESG, CLASS_VARS=YEAR MONTH, VARIABLES=VW_NON_ESG_RETURNS_DECOMP, OUTPUT_FILE=KS_VW_NON_ESG_RETURNS, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_VW_NON_ESG_RET_DECOMP);

/* STEP (3.23) - MERGING ABOVE DATASET WITH TOTAL.DATASET.FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_TOTAL_AUM, INPUT_FILE_2=KS_VW_NON_ESG_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_TOTAL_AUM);

/* STEP (3.24) - CREATING PERMANENT DATASET IN THE LIBRARY */
DATA HOLDINGS.NZD_TOTAL_AUM;
	SET NZD_TOTAL_AUM;
RUN;

/* -------------------------------------------------------------------------------STEP 4 --------------------------------------------------------------------------------------------*/
/* CREATING DATASET WHERE FUNDRETURNS NOT EQUAL TO MISSING */
/* THIS DATASET IS THE MAIN DATASET TO BE USED IN ALL CALCULATIONS HENCEFORTH */
DATA NZD_DATASET_FINAL ;
	SET Nzd_total_aum ; 
	WHERE Fundreturns_NZD1 NE . AND Netassets_NZD NE . ;
RUN;

/* -------------------------------------------------------------------------------STEP 5--------------------------------------------------------------------------------------------*/
/* CREATING A FLAG FOR VALUES WHERE FUNDRETURNS AND NETASSET NOT EQUAL TO MISSING */
PROC SORT DATA = NZD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;
DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	IF FUNDRETURNS_nzd1 NE . AND Netassets_NZD NE . ;
	NON_MISSING = 1;
RUN;

/* --------------------------------------------------------------------------STEP 6----------------------------------------------------------------------------*/
/* MERGING NETASSETS AND FUNDRETURNS NOT MISSING FLAG WITH HD_ALL_FINAL FILE */
PROC SORT DATA = HOLDINGS.NZD_DATASET_FINAL OUT = NZD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;
/* STEP (6.1) : SELECTING DISTINCT VALUES FOR EACH FUND */
PROC SQL;
	CREATE TABLE NON_MISSING_FLAG AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, NON_MISSING
	FROM NZD_DATASET_FINAL
	WHERE NON_MISSING = 1;
QUIT;

/* STEP (6.2) : MERGING ABOVE DATA WITH HD_ALL DATA */
PROC SORT DATA = NON_MISSING_FLAG; BY FUNDID YEAR MONTH; RUN;

PROC SORT DATA = HOLDINGS.NZD_HD_ALL_FINAL OUT = FILE_1; BY FUNDID YEAR MONTH; RUN;

DATA HOLDINGS.NZD_HD_ALL_FINAL;
	MERGE 	FILE_1( IN = A ) 		NON_MISSING_FLAG (IN = B);
	BY FUNDID YEAR MONTH;
	IF A AND B;	/* THE CORRECT CODE IS IF AND B. USE THIS. */
RUN;


/*-------------------------------------------------------------------------------STEP 7--------------------------------------------------------------------------------------------*/
/*---------------------------------------------------CALCULATION TOTAL ASSET UNDER MANAGEMENT (AUM) OF DATASET---------------------------------------------------------------------*/
/*---------------------------------------------------CALCULATION AVERAGE ASSET UNDER MANAGEMENT (AUM) OF DATASET-------------------------------------------------------------------*/

/*STEP (7.1) : CREATE DATASET FROM PROC SQL FOR DISTINCT VALUES OF FUNDID AND NETASSET*/
PROC SQL;
	CREATE TABLE TOTAL_AUM AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Netassets_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL ;
QUIT;
RUN;

/*STEP (7.2) : A) TAKING SUM OF ALL NETASSET VALUES FOR THE DATASET PER MONTH PER YEAR
		     B) TAKING AVG OF ALL NETASSET VALUES FOR THE DATASET PER MONTH PER YEAR. - CALCULATIONS DONE FOR OVERALL DATA */
PROC SUMMARY DATA = TOTAL_AUM NWAY MISSING ;
	CLASS YEAR MONTH;
	VAR Netassets_NZD;
	OUTPUT OUT = NZD_AUM_VALUES
	SUM (Netassets_NZD) = TOT_AUM_MON_NZD
	MEAN (Netassets_NZD) = AVG_AUM_MON_NZD;
RUN;

/*STEP (7.3) : MERGING TOTAL AUM WITH MAIN DATASET AT HOLDINGS LEVEL*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=NZD_AUM_VALUES, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (7.4) : A) TAKING SUM OF ALL NETASSET VALUES FOR THE DATASET PER MONTH PER YEAR
		     B) TAKING AVG OF ALL NETASSET VALUES FOR THE DATASET PER MONTH PER YEAR. - CALCULATIONS DONE FOR KIWISAVER DATA */
PROC SUMMARY DATA = TOTAL_AUM NWAY MISSING ;
	WHERE BINARYVAR = 1 ;
	CLASS YEAR MONTH;
	VAR Netassets_NZD;
	OUTPUT OUT = NZD_KS_AUM_VALUES
	SUM (Netassets_NZD) = KS_TOT_AUM_MON_NZD
	MEAN (Netassets_NZD) = KS_AVG_AUM_MON_NZD;
RUN;

/*STEP (7.5) : MERGING TOTAL AUM WITH MAIN DATASET AT HOLDINGS LEVEL*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=NZD_KS_AUM_VALUES, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/*---------------------------------------------------------------------STEP 8-------------------------------------------------------------------------------------------------------*/
/*----------------------------------CALCULATION TOTAL ASSET UNDER MANAGEMENT (AUM) OF DATASET FOR ESG HOLDINGS----------------------------------------------------------------------*/
/*----------------------------------CALCULATION AVERAGE ASSET UNDER MANAGEMENT (AUM) OF DATASET FOR ESG HOLDINGS--------------------------------------------------------------------*/

/*STEP (8.1) : CALCULATING SUM_ESG_CAPITAL OF EACH FUND PER MONTH AND YEAR FOR OVERALL DATA*/
%PROC_SUMMARY_ESG1(INPUT_FILE=NZD_DATASET_FINAL, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=CAPITAL_INVESTED_PER_HOLDING, OUTPUT_FILE=ESG_AUM_MONTHLY, STATS_OPS=SUM, CALCULATED_VAR=SUM_ESG_CAPITAL_NZD);

/*STEP (8.2) : MERGING DATASET WITH MAIN DATA*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_AUM_MONTHLY, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*STEP (8.3) : A) TAKING SUM OF ALL SUM_ESG_CAPITAL VALUES FOR THE DATASET PER MONTH PER YEAR
		     B) TAKING AVG OF SUM_ESG_CAPITAL VALUES FOR THE DATASET PER MONTH PER YEAR FOR OVERALL DATA */
PROC SUMMARY DATA = ESG_AUM_MONTHLY NWAY MISSING ;
	CLASS YEAR MONTH ;
	VAR SUM_ESG_CAPITAL_NZD ;
	OUTPUT OUT = ESG_AUM_VALUES
	SUM (SUM_ESG_CAPITAL_NZD) = ESG_TOT_AUM_MON_NZD
	MEAN (SUM_ESG_CAPITAL_NZD) = ESG_AVG_AUM_MON_NZD;
RUN;

/*STEP (8.4)- MERGING DATASET WITH MAIN DATASET*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_AUM_VALUES, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (8.5) : CREATING DATASET OF DISTINCT VALUES FOR ESG AUM CALCULATIONS FROM TOTAL_DATASET_FINAL FOR KIWISAVER FUNDS */
PROC SQL;
	CREATE TABLE KS_SUM_ESG_CAPITAL AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, SUM_ESG_CAPITAL_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL ;
QUIT;

/*STEP (8.5) : A) TAKING SUM OF ALL SUM_ESG_CAPITAL VALUES FOR THE DATASET PER MONTH PER YEAR
		     B) TAKING AVG OF SUM_ESG_CAPITAL VALUES FOR THE DATASET PER MONTH PER YEAR FOR KIWISAVER DATA */
PROC SUMMARY DATA = KS_SUM_ESG_CAPITAL NWAY MISSING ;
	WHERE BINARYVAR = 1 ;
	CLASS YEAR MONTH ;
	VAR SUM_ESG_CAPITAL_NZD ;
	OUTPUT OUT = KS_ESG_AUM_VALUES
	SUM (SUM_ESG_CAPITAL_NZD) = KS_ESG_TOT_AUM_MON_NZD
	MEAN (SUM_ESG_CAPITAL_NZD) = KS_ESG_AVG_AUM_MON_NZD ;
RUN;

/*STEP (8.6)- MERGING DATASET WITH MAIN DATASET*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_ESG_AUM_VALUES, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* UPDATING PERMANENT DATASETS IN THE LIBRARY */
/*DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
RUN;*/

/*-------------------------------------------------------------------------STEP 9---------------------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL ESG HOLDINGS BY WEIGHT------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------CALCULATION OF ESG TILT-------------------------------------------------------------------*/

/* STEP (9.1) - CALCULATING TOTAL WEIGHT OF ESG HOLDINGS PER FUND - SUM OF PERCENTHOLDINGS PER FUND PER MONTH PER YEAR */
%PROC_SUMMARY_ESG1(INPUT_FILE=NZD_DATASET_FINAL, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PERCENTHOLDINGS, OUTPUT_FILE=ESG_TOTAL_HOLDINGS, STATS_OPS=SUM, CALCULATED_VAR=NZD_ESG_WT_OF_FUND);

/*STEP (9.2) : MERGING DATASET WITH MAIN DATA*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_TOTAL_HOLDINGS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*STEP (9.3) : CALCULATING AVERAGE ESG HOLDINGS FOR THE MONTH AND YEAR
		       CALCULATING TOTAL INDUSTRY ESG WEIGHT FOR THE MONTH AND YEAR FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_TOTAL_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=INDUSTRY_AVG, STATS_OPS=MEAN, CALCULATED_VAR=INDUSTRY_AVG_ESG_WT_NZD);

/* STEP (9.4) : A)MERGING DATASET WITH MAIN DATASET
              B)CALCULATING ESG TILT FOR THE FUND*/
PROC SORT DATA = INDUSTRY_AVG; BY YEAR MONTH;  RUN;
PROC SORT DATA = ESG_TOTAL_HOLDINGS ; BY YEAR MONTH; RUN;

DATA ESG_HOLDINGS_TILT_NZD; 
    MERGE ESG_TOTAL_HOLDINGS(IN=A) INDUSTRY_AVG(IN=B);
    BY YEAR MONTH;
    IF A;
    ESG_TILT_INCLUSIVE_NZD = NZD_ESG_WT_OF_FUND - INDUSTRY_AVG_ESG_WT_NZD;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_HOLDINGS_TILT_NZD, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (9.5) : CREATING DATASET FOR DISTINCT VALUES OF ESG TILT TO CALCULATE TILT MONTH AND YEAR AVERAGE */
PROC SQL;
	CREATE TABLE ESG_TILT_AVG AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ESG_TILT_INCLUSIVE_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP (9.6) : CREATING AVERAGE ESG TILT OF FUNDS FOR OVERALL DATA AND MERGING IT WITH MAIN DATASET */
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_TILT_AVG, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_TILT_INCLUSIVE_NZD, OUTPUT_FILE=INDUSTRY_ESG_TILT, STATS_OPS=MEAN, CALCULATED_VAR=INDUSTRY_ESG_TILT_NZD);

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=INDUSTRY_ESG_TILT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (9.7) : CREATING AVERAGE ESG TILT OF FUNDS FOR KIWISAVER DATA AND MERGING IT WITH MAIN DATASET */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=ESG_TILT_AVG, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_TILT_INCLUSIVE_NZD, OUTPUT_FILE=KS_INDUSTRY_ESG_TILT, STATS_OPS=MEAN, CALCULATED_VAR=KS_INDUSTRY_ESG_TILT_NZD);

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2= KS_INDUSTRY_ESG_TILT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (9.8) : CREATING DATASET OF DISTINCT VALUES FOR AVERAGE ESG HOLDINGS WEIGHT CALCULATIONS FROM TOTAL_DATASET_FINAL FOR KIWISAVER FUNDS */
PROC SQL;
	CREATE TABLE KS_ESG_WEIGHT_OF_FUND AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, NZD_ESG_WT_OF_FUND, BINARYVAR
	FROM NZD_DATASET_FINAL ; 
QUIT;

/* STEP (9.9) : CALCULATING AVERAGE ESG HOLDINGS FOR THE MONTH AND YEAR FOR KIWISAVER DATASET */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=KS_ESG_WEIGHT_OF_FUND, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=KS_INDUSTRY_AVG, STATS_OPS=MEAN, CALCULATED_VAR=KS_INDUSTRY_AVG_ESG_WT_NZD);

PROC SORT DATA = KS_INDUSTRY_AVG ;
	BY  YEAR MONTH;
RUN;

PROC SORT DATA = NZD_DATASET_FINAL OUT = FILE_18 ; BY YEAR MONTH ; RUN;

DATA NZD_DATASET_FINAL;
	MERGE FILE_18 ( IN =A) KS_INDUSTRY_AVG ( IN = B);
	BY YEAR MONTH;
	IF A ;
	DROP _TYPE_ _FREQ_ ;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_INDUSTRY_AVG, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
RUN;


/*---------------------------------------------------------------------STEP 10------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL ESG STOCKS IN FUND PORTFOLIO------------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF AVERAGE STOCKS IN FUND PORTFOLIO   ------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL HOLDINGS IN NUMBERS IN FUND PORTFOLIO---------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF PROPORTION OF ESG STOCKS (TO TOTAL HOLDINGS)  IN FUND PORTFOLIO-------------------------------------------------------*/

/* STEP (10.1) : CREATE DATASET FOR TOTAL EQUITY NUMBERS CALCULATION. */

PROC SQL;										/*CHECKING ALL DISTINCT DETAILHOLDINGTYPE TO FILTER FOR EQUITY*/
    SELECT DISTINCT DETAILHOLDINGTYPE
    FROM HOLDINGS.nzd_hd_all_final;
QUIT;

/* CREATING TEMP DATASET FOR NZD_HD_ALL_FINAL */
DATA NZD_HD_ALL_FINAL;
	SET HOLDINGS.NZD_HD_ALL_FINAL;
RUN;

PROC SQL;
	CREATE TABLE HOLDINGS_EQUITY AS
	SELECT DISTINCT *
	FROM NZD_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
QUIT;
RUN;

/* STEP (10.2) : CREATING DATASET FROM ABOVE DATASET FOR (A) ESG STOCKS, (B) TOTAL STOCKS AND (C) TOTAL HOLDINGS IN A FUND PORTFOLIO */

PROC SQL;
    CREATE TABLE ESG_EQUITY AS
    SELECT FUNDID, YEAR, MONTH, COUNT(*) AS ESGHOLDINGS_EQUITY_NZD
    FROM HOLDINGS_EQUITY
    WHERE ESG = 1
    GROUP BY FUNDID, YEAR, MONTH;

    CREATE TABLE TOTAL_EQUITY AS
    SELECT FUNDID, YEAR, MONTH, COUNT(*)AS TOTALHOLDINGS_EQUITY_NZD
    FROM HOLDINGS_EQUITY
    GROUP BY FUNDID, YEAR, MONTH;

	CREATE TABLE TOTAL_HOLDINGS AS
	SELECT FUNDID, YEAR, MONTH, COUNT(NAME)AS COMPONENT_HOLDINGS_NZD
	FROM nzd_hd_all_final
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP (10.3) : MERGING ABOVE TWO DATASET 
			     CALCULATING RATIO OF ESG STOCKS TO TOTAL STOCKS 
			     CALCULATING RATIO OF ESG STOCKS TO TOTAL HOLDINGS OR COMPONENTS HOLDINGS */

DATA HOLDINGS.ESGPROPORTION_NZD;
	MERGE ESG_EQUITY ( IN = A) TOTAL_EQUITY ( IN = B) TOTAL_HOLDINGS ( IN = C);
	BY FUNDID YEAR MONTH;
	IF A OR B OR C;
	RATIO_ESG_TO_TOT_EQUITY_NZD = ESGHOLDINGS_EQUITY_NZD / TOTALHOLDINGS_EQUITY_NZD ;
	RATIO_ESG_TO_TOT_HOLDINGS_NZD = ESGHOLDINGS_EQUITY_NZD / COMPONENT_HOLDINGS_NZD ;
RUN;

/* STEP (10.4) : MERGING ABOVE DATASET WITH MAIN DATASET, I.E. TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=HOLDINGS.ESGPROPORTION_NZD, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (10.5) : CREATING DATASET FOR DISTINCT VALUES OF VARIABLES TO CALCULATE AVERGAES */
PROC SQL;
	CREATE TABLE SHARES_HOLDINGS AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, BINARYVAR,ESGHOLDINGS_EQUITY_NZD, TOTALHOLDINGS_EQUITY_NZD,
					COMPONENT_HOLDINGS_NZD, RATIO_ESG_TO_TOT_EQUITY_NZD, RATIO_ESG_TO_TOT_HOLDINGS_NZD
	FROM NZD_DATASET_FINAL
	ORDER BY YEAR, MONTH ;
QUIT;

/* STEP (10.5) : CREATING AVG ESG EQUITY HOLDINGS ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=ESGHOLDINGS_EQUITY_NZD, OUTPUT_FILE=AVG_ESG_HOLDINGS_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ESG_HOLDINGS_EQUITY_NZD);

/* STEP ( 10.6 ) - MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_ESG_HOLDINGS_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (10.7) : CREATING AVG ESG EQUITY HOLDINGS ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA AND MERGING WITH ABOVE DATASET */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=ESGHOLDINGS_EQUITY_NZD, OUTPUT_FILE=KS_AVG_ESG_HOLDINGS_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_HOLDINGS_EQUITY_NZD);

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_ESG_HOLDINGS_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.8 ) : CREATING AVG TOTALHOLDINGS EQUITY ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=TOTALHOLDINGS_EQUITY_NZD, OUTPUT_FILE=AVG_TOTAL_HOLDINGS_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_TOTAL_HOLDINGS_EQUITY_NZD);

/* STEP ( 10.9 ) - MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_TOTAL_HOLDINGS_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.10 ) : CREATING AVG TOTALHOLDINGS EQUITY ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=TOTALHOLDINGS_EQUITY_NZD, OUTPUT_FILE=KS_AVG_TOTAL_HOLDINGS_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_TOTAL_HOLDINGS_EQUITY_NZD);

/* STEP ( 10.11 ) - MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_TOTAL_HOLDINGS_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.12 ) : CREATING AVG COMPONENT HOLDINGS FOR PORTFOLIO ACROSS YEAR AND MONTH VARIABLE */
%PROC_SUMMARY_OVERALL(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=COMPONENT_HOLDINGS_NZD, OUTPUT_FILE=AVG_COMPONENT_HOLDINGS, STATS_OPS=MEAN, CALCULATED_VAR=AVG_COMPONENT_HOLDINGS_NZD);

/* STEP ( 10.13 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_COMPONENT_HOLDINGS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.14 ) : CREATING AVG COMPONENT HOLDINGS FOR PORTFOLIO ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=COMPONENT_HOLDINGS_NZD, OUTPUT_FILE=KS_AVG_COMPONENT_HOLDINGS, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_COMPONENT_HOLDINGS_NZD);

/* STEP ( 10.15 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_COMPONENT_HOLDINGS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.16 ) - CREATING AVG RATIO_ESG_TO_TOT_EQUITY ACROSS YEAR AND MONTH VARIABLE */
%PROC_SUMMARY_OVERALL(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=AVG_RATIO_ESG_TO_TOT_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_RATIO_ESG_TO_TOT_EQUITY_NZD);

/* STEP ( 10.17 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_RATIO_ESG_TO_TOT_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.18 ) - CREATING AVG RATIO_ESG_TO_TOT_EQUITY ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=KS_AVG_RATIO_ESG_TO_TOT_EQUITY, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_RT_ESG_TO_TOT_EQUITY_NZD);

/* STEP ( 10.19 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_RATIO_ESG_TO_TOT_EQUITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.20 ) - CREATING AVG RATIO_ESG_TO_TOT_HOLDINGS ACROSS YEAR AND MONTH VARIABLE */
%PROC_SUMMARY_OVERALL(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_HOLDINGS_NZD, OUTPUT_FILE=RATIO_ESG_TO_TOT_HOLDINGS, STATS_OPS=MEAN, CALCULATED_VAR=AVG_RT_ESG_TO_TOT_HOLDINGS_NZD);

/* STEP ( 10.21 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=RATIO_ESG_TO_TOT_HOLDINGS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 10.22 ) - CREATING AVG RATIO_ESG_TO_TOT_HOLDINGS ACROSS YEAR AND MONTH VARIABLE */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=SHARES_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_HOLDINGS_NZD, OUTPUT_FILE=KS_RATIO_ESG_TO_TOT_HOLDINGS, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_RT_ESG_TO_TOT_HLDG_NZD);

/* STEP ( 10.23 ) : MERGING ABOVE FILE WITH ESG.TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_RATIO_ESG_TO_TOT_HOLDINGS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
RUN;


/*---------------------------------------------------------------------STEP 11———————————————————————————————————————————————————*/
/*-------------------------------------------------CALCULATION OF ESG FUND FLOWS FOR FUND PORTFOLIO---------------------------------------------------------------------------------*/

/* STEP (11.1) : CREATING DATASET FOR ESG FUND FLOWS CALCULATIONS */

PROC SQL;
	CREATE TABLE ESGSET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, VW_ESG_RETURNS_DECOMP, SUM_ESG_CAPITAL_NZD, NZD_ESG_WT_OF_FUND
	FROM NZD_DATASET_FINAL
	WHERE ESG =1;
QUIT;
RUN;

/* STEP (11.2) : FUND ESG FLOW CALCULATIONS */
DATA ESGFUND_FLOW_NZD;
    SET ESGSET;
    BY FUNDID;
    LAGGED_ESGNETASSET = LAG(SUM_ESG_CAPITAL_NZD); 		   			/*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_ESGNETASSET = 0;  	   			/*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
   	CHANGE_ESGNETASSET = SUM_ESG_CAPITAL_NZD - LAGGED_ESGNETASSET; 	
   	
   	IF NOT MISSING(SUM_ESG_CAPITAL_NZD) AND SUM_ESG_CAPITAL_NZD NE 0 AND NOT MISSING(CHANGE_ESGNETASSET) THEN DO;
	 															/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_ESGNETASSET_PERCENT = (CHANGE_ESGNETASSET / LAGGED_ESGNETASSET) * 100 ;  	
	END;
	ELSE CHANGE_ESGNETASSET_PERCENT = .; 						/* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(VW_ESG_RETURNS_DECOMP) AND VW_ESG_RETURNS_DECOMP NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	VW_ESG_RETURNS_DECIMAL = VW_ESG_RETURNS_DECOMP/100;	
    END;
	ELSE VW_ESG_RETURNS_DECIMAL = .; 
	
	ESG_DOLLAR_FLOW_NZD = (SUM_ESG_CAPITAL_NZD - (LAGGED_ESGNETASSET * (1 + VW_ESG_RETURNS_DECIMAL))) ; 
	
	IF NOT MISSING(LAGGED_ESGNETASSET) AND LAGGED_ESGNETASSET NE 0 AND NOT MISSING(ESG_DOLLAR_FLOW_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	ESG_FLOW_PERCENT_NZD = (ESG_DOLLAR_FLOW_NZD / LAGGED_ESGNETASSET) * 100;
    END;
	ELSE ESG_FLOW_PERCENT_NZD = .;
RUN;

/* STEP (11.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM ESGFUND_FLOW FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */

DATA ESG_FLOW_TEMP;	
	SET ESGFUND_FLOW_NZD;
	DROP VW_ESG_RETURNS_DECOMP SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND LAGGED_ESGNETASSET CHANGE_ESGNETASSET CHANGE_ESGNETASSET_PERCENT VW_ESG_RETURNS_DECIMAL ;
RUN;

/* STEP (11.4) : MERGING ESG_FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (11.5) : CREATING DATASET OF DISTINCT VALUES TO CREATE ESG FLOW PERCENT ACROSS YEAR AND MONTH */
PROC SQL;
	CREATE TABLE ESG_FLOW_PERCENT AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ESG_FLOW_PERCENT_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP ( 11.6) ) - CREATING AVG ESG_FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_FLOW_PERCENT, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_FLOW_PERCENT_NZD, OUTPUT_FILE=AVG_ESG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ESG_FLOW_PERCENT_NZD);

/* STEP (11.7) : MERGING ESG_FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_ESG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 11.8) ) - CREATING AVG ESG_FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=ESG_FLOW_PERCENT, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_FLOW_PERCENT_NZD, OUTPUT_FILE=KS_AVG_ESG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_FLOW_PERCENT_NZD);

/* STEP (11.9) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_ESG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*--------------------------WINSORIZATION DONE AND CALCULATING ESG_FLOW_PERCENT_WIN------------------------------*/

/* STEP (11.10) : WINSORIZATION FOR OVERALL FLOW TO CALCULATE AVG_ESG_FLOW_PERCENT_WIN ACROSS MONTH AND YEAR */

PROC SORT DATA = ESG_FLOW_PERCENT ; BY YEAR; RUN;

PROC SUMMARY DATA = ESG_FLOW_PERCENT ;
	VAR ESG_FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

DATA WANT_ESG;
	if _N_ = 1 then set _STATS_;
	SET	ESG_FLOW_PERCENT ; 
	IF ESG_FLOW_PERCENT_NZD < FLOW_P1 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P1 ; 
	IF ESG_FLOW_PERCENT_NZD > FLOW_P99 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P99 ; 
	IF ESG_FLOW_PERCENT_WIN_NZD = . THEN ESG_FLOW_PERCENT_WIN_NZD = ESG_FLOW_PERCENT_NZD ;
RUN;

/* STEP (11.11) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=WANT_ESG, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_FLOW_PERCENT_WIN_NZD, OUTPUT_FILE=AVG_ESG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ESG_FLOW_PERCENT_WIN_NZD);

/* STEP (11.12) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */

PROC SORT DATA = WANT_ESG; BY YEAR MONTH; RUN;

PROC SORT DATA = AVG_ESG_FLOW_PERCENT_WIN; BY YEAR MONTH; RUN;

DATA TEMP_21;
	MERGE 	WANT_ESG ( IN = A ) 	AVG_ESG_FLOW_PERCENT_WIN ( IN = B ) ;
	BY YEAR MONTH;
	IF A ;
	DROP _TYPE_ 	_FREQ_		ESG_FLOW_PERCENT_NZD		BINARYVAR 	FLOW_P1		FLOW_P99 ;
RUN;

/* STEP (11.13) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TEMP_21, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (11.14) : WINSORIZATION DONE FOR KIWISAVER FLOW DATA TO CALCULATE KS_AVG_FLOW_PERCENT_WIN ACROSS MONTH AND YEAR */
PROC SORT DATA = ESG_FLOW_PERCENT ; BY YEAR; RUN;

PROC SUMMARY DATA = ESG_FLOW_PERCENT ;
	WHERE BINARYVAR = 1 ;
	VAR ESG_FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

/* STEP (11.15) - CREATING DATASET FOR BINARYVAR = 1 */
PROC SQL;
	CREATE TABLE KS_ESG	AS
	SELECT *
	FROM ESG_FLOW_PERCENT
	WHERE BINARYVAR = 1 ;
QUIT;

/* STEP (11.16) - ADJUSTING DATA TO NEW ESG FLOW PERCENT VALUES */

DATA KS_WANT_ESG;
	if _N_ = 1 then set _STATS_;
	SET	KS_ESG ; 
	IF ESG_FLOW_PERCENT_NZD < FLOW_P1 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P1 ; 
	IF ESG_FLOW_PERCENT_NZD > FLOW_P99 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P99 ; 
	IF ESG_FLOW_PERCENT_WIN_NZD = . THEN ESG_FLOW_PERCENT_WIN_NZD = ESG_FLOW_PERCENT_NZD ;
RUN;

/* STEP (11.17) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_WANT_ESG, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_FLOW_PERCENT_WIN_NZD, OUTPUT_FILE=KS_ESG_AVG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_AVG_FLOW_PERCENT_WIN_NZD);

/* STEP (11.18) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_ESG_AVG_FLOW_PERCENT_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/*---------------------------------------------------------------------STEP 12———————————————————————————————————————————————————*/
/*--------------------------------------------CALCULATION OF OVERALL FUND FLOWS FOR FUND PORTFOLIO---------------------------------------------------------------------------------*/

/* STEP (12.1) : CREATING DATASET FOR OVERALL FUND FLOWS CALCULATIONS */

PROC SQL;										
	CREATE TABLE FUNDFLOW_DATASET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1, Netassets_NZD
	FROM NZD_DATASET_FINAL ;										
QUIT;
RUN;

/* STEP (12.2) : CALCULATING FUND FLOWS FOR THE DATASET */

DATA FLOW_CALS_NZD; 
    SET FUNDFLOW_DATASET;
    BY FUNDID;
    LAGGED_NETASSET = LAG(Netassets_NZD); 		   /*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_NETASSET = 0;  /*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
    NETASSET_CHANGE = Netassets_NZD - LAGGED_NETASSET; 	/*CREATING NEW VARIABLE*/
   	
   	IF NOT MISSING(Netassets_NZD) AND Netassets_NZD NE 0 AND NOT MISSING(NETASSET_CHANGE) THEN DO; 	/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_NETASSET_PERCENT = ROUND((NETASSET_CHANGE / Netassets_NZD) * 100, 0.01);  /*CREATING NEW VARIABLE. OUT OF CURIOSITY AND FOR HANDLING MISSING VALUES AND ZEROS*/
    END;
	ELSE CHANGE_NETASSET_PERCENT = .; /* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(Fundreturns_NZD1) AND Fundreturns_NZD1 NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	FUNDRETURNS_NEW_VAL_DECIMAL = Fundreturns_NZD1/100;
    END;
	ELSE FUNDRETURNS_NEW_VAL_DECIMAL = .; 
	
	FLOW_DOLLAR_VALUE_NZD = (Netassets_NZD -(LAGGED_NETASSET *(1 + FUNDRETURNS_NEW_VAL_DECIMAL))); 
	
	IF NOT MISSING(LAGGED_NETASSET) AND LAGGED_NETASSET NE 0 AND NOT MISSING(FLOW_DOLLAR_VALUE_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	FLOW_PERCENT_NZD = (FLOW_DOLLAR_VALUE_NZD/LAGGED_NETASSET)*100 ;
    END;
	ELSE CHANGE_NETASSET_PERCENT = .;
RUN;

/* STEP (12.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM FLOW_CALS FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */
DATA FLOW_TEMP;	
	SET FLOW_CALS_NZD;
	DROP Fundreturns_NZD1 Netassets_NZD LAGGED_NETASSET NETASSET_CHANGE CHANGE_NETASSET_PERCENT FUNDRETURNS_NEW_VAL_DECIMAL ;
RUN;

/* STEP (12.4) : MERGING FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (12.5) : CREATING DATASET OF DISTINCT VALUES TO CREATE FLOW PERCENT ACROSS YEAR AND MONTH */
PROC SQL;
	CREATE TABLE FLOW_PERCENT_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, FLOW_PERCENT_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP ( 12.6) ) - CREATING AVG_FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA WITHOUT WINSORIZATION */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FLOW_PERCENT_SET, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_NZD, OUTPUT_FILE=AVG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=AVG_FLOW_PERCENT_NZD);

/* STEP (12.7) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 12.8) ) - CREATING AVG FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA - WITHOUT WINSORIZATION*/
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FLOW_PERCENT_SET, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_NZD, OUTPUT_FILE=KS_AVG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_FLOW_PERCENT_NZD);

/* STEP (12.9) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*--------------------------WINSORIZATION DONE FOR WHOLE DATASET------------------------------*/

/* STEP (12.10) : WINSORIZATION DONE FOR OVERALL FLOW TO CALCULATE AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
PROC SUMMARY DATA = FLOW_PERCENT_SET ;
	VAR FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

/* STEP (12.11) - CREATING WINSORIZED DATASET */
DATA WANT;
    IF _N_ = 1 THEN SET _STATS_;
    SET FLOW_PERCENT_SET;  
    IF FLOW_PERCENT_NZD < FLOW_P1 AND FLOW_PERCENT_NZD NE . THEN FLOW_PERCENT_WIN_NZD = FLOW_P1; 
    IF FLOW_PERCENT_NZD > FLOW_P99 AND FLOW_PERCENT_NZD NE . THEN FLOW_PERCENT_WIN_NZD = FLOW_P99; 
    IF FLOW_PERCENT_WIN_NZD = . THEN FLOW_PERCENT_WIN_NZD = FLOW_PERCENT_NZD;
RUN;

/* STEP (12.12) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=WANT, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_WIN_NZD, OUTPUT_FILE=AVG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=AVG_FLOW_PERCENT_WIN_NZD);

/* STEP (12.13) : MERGING FLOW_PERCENT_WIN DATAFILE WITH AVG_FLOW_PERCENT_WIN DATAFILE */
PROC SORT DATA = WANT; BY YEAR MONTH; RUN;
PROC SORT DATA = AVG_FLOW_PERCENT_WIN; BY YEAR MONTH; RUN;

DATA TEMP_12;
	MERGE 	WANT ( IN = A ) 	AVG_FLOW_PERCENT_WIN ( IN = B ) ;
	BY YEAR MONTH;
	IF A ;
	DROP _TYPE_ 	_FREQ_		FLOW_PERCENT_NZD		BINARYVAR ;
RUN;

/* STEP (12.14) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TEMP_12, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP : WINSORIZATION DONE FOR KIWISAVER FLOW DATA TO CALCULATE KS_AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
/* STEP (12.15) : CREATING DATASET FOR KIWISAVER CALCULATIONS */

PROC SQL;
	CREATE TABLE KS_FLOW AS
	SELECT *
	FROM FLOW_PERCENT_SET
	WHERE BINARYVAR = 1;
QUIT;

/* STEP (12.16) - CALCULATING WINSORIZED FLOWS AND CREATING DATASET OF WINSORIZED FLOWS */

PROC SUMMARY DATA = KS_FLOW ;
	VAR FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

DATA KS_WANT;
	if _N_ = 1 then set _STATS_;
	SET	KS_FLOW ; 
	IF FLOW_PERCENT_NZD < FLOW_P1 AND FLOW_PERCENT_NZD NE .  THEN FLOW_PERCENT_WIN_NZD = FLOW_P1 ; 
	IF FLOW_PERCENT_NZD > FLOW_P99 AND FLOW_PERCENT_NZD NE .  THEN FLOW_PERCENT_WIN_NZD = FLOW_P99 ; 
	IF FLOW_PERCENT_WIN_NZD = . THEN FLOW_PERCENT_WIN_NZD = FLOW_PERCENT_NZD;
RUN;

/* STEP (12.17) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_WANT, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_WIN_NZD, OUTPUT_FILE=KS_AVG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_FLOW_PERCENT_WIN_NZD);

/* STEP (12.18) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_FLOW_PERCENT_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
RUN;*/

/*---------------------------------------------------------------------STEP 13———————————————————————————————————————————————————*/
/*--------------------------------------------CALCULATION OF OVERALL DECOMPOSED FUND FLOWS FOR FUND PORTFOLIO-------------------------------------------------------*/

/* STEP (13.1) : CREATING DATASET FOR OVERALL FUND FLOWS CALCULATIONS */
PROC SQL;										
	CREATE TABLE FUNDFLOW_DATASET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Netassets_NZD, FUNDRETURNS_VW_DECOMP, FUNDRETURNS_NZD1
	FROM NZD_DATASET_FINAL 
	GROUP BY FUNDID, YEAR, MONTH;										
QUIT;
RUN;

/* STEP (13.2) : CALCULATING FUND FLOWS FOR THE DATASET */
DATA FLOW_CALS_NZD; 
    SET FUNDFLOW_DATASET;
    BY FUNDID;
    LAGGED_NETASSET = LAG(Netassets_NZD); 		   /*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_NETASSET = 0;  /*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
    NETASSET_CHANGE = Netassets_NZD - LAGGED_NETASSET; 	/*CREATING NEW VARIABLE*/
   	
   	IF NOT MISSING(Netassets_NZD) AND Netassets_NZD NE 0 AND NOT MISSING(NETASSET_CHANGE) THEN DO; 	/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_NETASSET_PERCENT = ROUND((NETASSET_CHANGE / Netassets_NZD) * 100, 0.01);  /*CREATING NEW VARIABLE. OUT OF CURIOSITY AND FOR HANDLING MISSING VALUES AND ZEROS*/
    END;
	ELSE CHANGE_NETASSET_PERCENT = .; /* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(FUNDRETURNS_VW_DECOMP) AND FUNDRETURNS_VW_DECOMP NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	FUNDRETURNS_NEW_VAL_DECIMAL = FUNDRETURNS_VW_DECOMP/100;
    END;
	ELSE FUNDRETURNS_NEW_VAL_DECIMAL = .; 
	
	FLOW_DOLLAR_VAL_DECOMP_NZD = (Netassets_NZD -(LAGGED_NETASSET *(1 + FUNDRETURNS_NEW_VAL_DECIMAL))); 
	
	IF NOT MISSING(LAGGED_NETASSET) AND LAGGED_NETASSET NE 0 AND NOT MISSING(FLOW_DOLLAR_VAL_DECOMP_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	FLOW_PERCENT_DECOMP_NZD = (FLOW_DOLLAR_VAL_DECOMP_NZD/LAGGED_NETASSET)*100 ;
    END;
	ELSE CHANGE_NETASSET_PERCENT = .;
RUN;

/* STEP (13.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM FLOW_CALS FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */
DATA FLOW_TEMP;	
	SET FLOW_CALS_NZD;
	DROP FUNDRETURNS_VW_DECOMP Netassets_NZD LAGGED_NETASSET NETASSET_CHANGE CHANGE_NETASSET_PERCENT FUNDRETURNS_NEW_VAL_DECIMAL FUNDRETURNS_NZD1 ;
RUN;

/* STEP (13.4) : MERGING FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (13.5) : CREATING DATASET OF DISTINCT VALUES TO CREATE FLOW PERCENT ACROSS YEAR AND MONTH */
PROC SQL;
	CREATE TABLE FLOW_PERCENT_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, FLOW_PERCENT_DECOMP_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP ( 13.6) ) - CREATING AVG_FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA WITHOUT WINSORIZATION */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FLOW_PERCENT_SET, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_DECOMP_NZD, OUTPUT_FILE=AVG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=AVG_FLOW_PERCENT_DECOMP_NZD);

/* STEP (13.7) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 13.8) ) - CREATING AVG FLOW_PERCENT ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA - WITHOUT WINSORIZATION*/
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FLOW_PERCENT_SET, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_DECOMP_NZD, OUTPUT_FILE=KS_AVG_FLOW_PERCENT, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_FLOW_PRCNT_NZD_DECOMP);

/* STEP (13.9) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_FLOW_PERCENT, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*--------------------------WINSORIZATION DONE FOR WHOLE DATASET------------------------------*/

/* STEP (13.10) : WINSORIZATION DONE FOR OVERALL FLOW TO CALCULATE AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
PROC SUMMARY DATA = FLOW_PERCENT_SET ;
	VAR FLOW_PERCENT_DECOMP_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

/* STEP (13.11) - CREATING WINSORIZED DATASET */
DATA WANT;
    IF _N_ = 1 THEN SET _STATS_;
    SET FLOW_PERCENT_SET;  
    IF FLOW_PERCENT_DECOMP_NZD < FLOW_P1 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P1; 
    IF FLOW_PERCENT_DECOMP_NZD > FLOW_P99 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P99; 
    IF FLOW_PERCENT_DECOMP_WIN_NZD = . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_PERCENT_DECOMP_NZD;
RUN;

/* STEP (13.12) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=WANT, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_DECOMP_WIN_NZD, OUTPUT_FILE=AVG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=AVG_FLOW_PRCNT_WIN_NZD_DECOMP);

/* STEP (13.13) : MERGING FLOW_PERCENT_WIN DATAFILE WITH AVG_FLOW_PERCENT_WIN DATAFILE */
PROC SORT DATA = WANT; BY YEAR MONTH; RUN;
PROC SORT DATA = AVG_FLOW_PERCENT_WIN; BY YEAR MONTH; RUN;

DATA WANT_12 ;
	MERGE 	WANT ( IN = A ) 	AVG_FLOW_PERCENT_WIN ( IN = B ) ;
	BY YEAR MONTH;
	IF A ;
	DROP _TYPE_ 	_FREQ_	BINARYVAR  FLOW_P1	FLOW_P99 ;
RUN;

/*STEP (13.14) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=WANT_12, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP : WINSORIZATION DONE FOR KIWISAVER FLOW DATA TO CALCULATE KS_AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
/* STEP (13.15) : CREATING DATASET FOR KIWISAVER CALCULATIONS */
PROC SQL;
	CREATE TABLE KS_FLOW AS
	SELECT *
	FROM FLOW_PERCENT_SET
	WHERE BINARYVAR = 1;
QUIT;

/* STEP (13.16) - CALCULATING WINSORIZED FLOWS AND CREATING DATASET OF WINSORIZED FLOWS */
PROC SUMMARY DATA = KS_FLOW ;
	VAR FLOW_PERCENT_DECOMP_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

DATA KS_WANT;
    IF _N_ = 1 THEN SET _STATS_;
    SET KS_FLOW;  
    IF FLOW_PERCENT_DECOMP_NZD < FLOW_P1 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P1; 
    IF FLOW_PERCENT_DECOMP_NZD > FLOW_P99 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P99; 
    IF FLOW_PERCENT_DECOMP_WIN_NZD = . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_PERCENT_DECOMP_NZD;
RUN;

/* STEP (13.17) : CREATING AVG_FLOW_PERCENT_WIN VARIABLE ACROSS YEAR AND MONTH */
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_WANT, CLASS_VARS=YEAR MONTH, VARIABLES=FLOW_PERCENT_DECOMP_WIN_NZD, OUTPUT_FILE=KS_AVG_FLOW_PERCENT_WIN, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_FLOW_PRCNT_WIN_NZD_DECMP);

/* STEP (13.18) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_FLOW_PERCENT_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_	_FREQ_ FLOW_P1 FLOW_P99;
RUN;

/*--------------------------------------------------------------STEP 13--------------------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF VOLATILITY OF FUNDRETURNS----------------------------------------------------------------------------------*/

/* STEP (13.1) : CREATING DATASET FOR DISTINCT FUNDRETURNS VALUES */
PROC SQL;			
	CREATE TABLE VOLATILITY_1 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1
	FROM NZD_DATASET_FINAL
	ORDER BY FUNDID, YEAR, MONTH ;
QUIT;
RUN;

/* STEP (13.1) : CREATING VOLATILITY VALUES FOR THE DATA */
PROC EXPAND DATA = VOLATILITY_1 OUT = RUNNING_VOL;
   BY FUNDID;
   CONVERT Fundreturns_NZD1 = ROLLING_VOLATILITY_NZD / TRANSFORMOUT=(MOVSTD 12);
RUN;

/* STEP (13.2) : CODE IS TO REMOVE FIRST 11 OBS OF ALL THE FUNDID SO THAT WE GET VOLATILITY FROM 12TH OBS.*/
DATA VOLATILITY_NZD;
    SET RUNNING_VOL;
    BY FUNDID;
	IF FIRST.FUNDID THEN COUNTER = 0;
	COUNTER + 1;
	IF COUNTER > 11 THEN OUTPUT;
	KEEP FUNDID MONTH YEAR TIME Fundreturns_NZD1 ROLLING_VOLATILITY_NZD ;
	IF LAST.FUNDID THEN COUNTER = 0;
RUN;

/* STEP (13.3) : CREATING DATASET FROM ESG.VOLATILITY TO MERGE WITH TOTAL_DATASET_FINAL */
DATA TEMP_VOLATILITY;
	SET VOLATILITY_NZD;
	DROP Fundreturns_NZD1 TIME;
RUN;

/* STEP (13.4) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TEMP_VOLATILITY, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP (13.5) - CREATING DATASET WITH DISTINCT VALUES OF FUNDRETURNS VOLATILITY TO CALCULATE AVERAGE */
PROC SQL;			
	CREATE TABLE VOLATILITY_10 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ROLLING_VOLATILITY_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL
	ORDER BY FUNDID, YEAR, MONTH ;
QUIT;
RUN;

/* STEP ( 13.5) - CREATING AVG VOLATILITY ACROSS YEAR AND MONTH VARIABLE FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=VOLATILITY_10, CLASS_VARS=YEAR MONTH, VARIABLES=ROLLING_VOLATILITY_NZD, OUTPUT_FILE=AVG_ROLLING_VOLATILITY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ROLLING_VOLATILITY_NZD);

/* STEP (13.6) : MERGING AVG VOLATILITY DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=AVG_ROLLING_VOLATILITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP ( 13.7) - CREATING AVG VOLATILITY ACROSS YEAR AND MONTH VARIABLE FOR KIWISAVER DATA */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=VOLATILITY_10, CLASS_VARS=YEAR MONTH, VARIABLES=ROLLING_VOLATILITY_NZD, OUTPUT_FILE=KS_AVG_ROLLING_VOLATILITY, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ROLLING_VOLATILITY_NZD);

/* STEP (13.8) : MERGING AVG VOLATILITY DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=KS_AVG_ROLLING_VOLATILITY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

DATA HOLDINGS.NZD_DATASET_FINAL_2 ;
	SET NZD_DATASET_FINAL ;
	DROP _TYPE_ _FREQ_;
RUN; 


/* *************************************************************************************** STEP 14 ******************************************************************************************* */
/* ******************************************************************************** CALCULATING SIN STOCKS ********************************************************************************* */
/* STEP 14.1 : IMPORTING BUSINESS SECTOR FILE */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Business_sector_SAS.CSV',
			   OUTPUT_FILE=BUSINESS_SECTOR);

PROC SORT DATA=BUSINESS_SECTOR; BY RICCODE; RUN;

/* CONCATENATION CODE */
/* STEP 14.2: CONCATENATE BUSINESS_SECTOR VALUES */
DATA BUS_SECTOR;
    SET BUSINESS_SECTOR;
    BY RICCODE;

    RETAIN Business_Sector_combined;
    
    IF FIRST.RICCODE THEN Business_Sector_combined = Business_Sector;
    ELSE Business_Sector_combined = CATX(', ', Business_Sector_combined, Business_Sector);
    
    IF LAST.RICCODE THEN OUTPUT;
    
    DROP Business_Sector;
RUN;

PROC SORT DATA = BUS_SECTOR OUT = FILE_1 NODUPKEY; BY RICCODE; RUN; 
/* STEP 14.3 : KEYWORD SEARCH FOR SIN STOCKS - CLASSIFYING SIN STOCKS*/
DATA FILE_456;
	SET BUS_SECTOR; 
	array keyword_stocks {54} $ 54 _temporary_ ;
	   	keyword_stocks[1] = 'Military' ;
	    keyword_stocks[2] = 'Defense';
		keyword_stocks[3] = 'Weapon';
		keyword_stocks[4] = 'Gambling';
	    keyword_stocks[5] = 'Adult Entertainment';
	    keyword_stocks[6] = 'Casinos';
	    keyword_stocks[7] = 'Beer';
	    keyword_stocks[8] = 'Wine';
	    keyword_stocks[9] = 'Alcoholic Beverages';
	    keyword_stocks[10] = 'Pubs';
	    keyword_stocks[11] = 'Bars';
	    keyword_stocks[12] = 'Tobacco';
	    keyword_stocks[13] = 'Liquor';
	    keyword_stocks[14] = 'Liquor stores' ;
		keyword_stocks[15] = 'Smoking';
		keyword_stocks[16] = 'Cannabis';
		keyword_stocks[17] = 'Defense Contractors';
		keyword_stocks[18] = 'Gaming Companies';
		keyword_stocks[19] = 'Online Gambling';
		keyword_stocks[20] = 'Cigarettes';
		keyword_stocks[21] = 'Weapons';
		keyword_stocks[22] = 'Vaping';
		keyword_stocks[23] = 'E-cigarettes';
		keyword_stocks[24]=  'Lottery';
		keyword_stocks[25] = 'Lotteries';
		keyword_stocks[26] = 'Betting';
		keyword_stocks[27] = 'Poker';
		keyword_stocks[28] = 'Sports Betting';
		keyword_stocks[29] = 'Escort Services';
		keyword_stocks[30] = 'Firearms';
		keyword_stocks[31] = 'Arms';
		keyword_stocks[32] = 'Ammunition';
		keyword_stocks[33] = 'Guns';
		keyword_stocks[34] = 'Marijuana';
		keyword_stocks[35] = 'Breweris';
		keyword_stocks[36] = 'Distilleries';
		keyword_stocks[37] = 'Cigars';
		keyword_stocks[38] = 'Nightclubs';
		keyword_stocks[39] = 'Adult Websites';
		keyword_stocks[40] = 'Slot Machines';
		keyword_stocks[41] = 'Taverns';
		keyword_stocks[42] = 'Strip Clubs';
		keyword_stocks[43] = 'Beting Shops';
		keyword_stocks[44] = 'Spirits';
		keyword_stocks[45] = 'Gamble';
		keyword_stocks[46] = 'Brandy';
		keyword_stocks[47] = 'Vodka';
		keyword_stocks[48] = 'Brew';
		keyword_stocks[49] = 'Ale';
		keyword_stocks[50] = 'Defence';
		keyword_stocks[51] = 'Malt';
		keyword_stocks[52] = 'Brewers';
		keyword_stocks[53] = 'Vintners';
		keyword_stocks[54] = 'Wineries';
	
	CLEANED_STRING = TRANWRD(BUSINESS_SECTOR_COMBINED, ',', '');	/*REMOVE ALL COMMAS*/

	LENGTH KEYWORD_FOUND $50 ;
	KEYWORD_FOUND = '';
	SIN_STOCKS = 0 ;
	DO I =1 TO 54;
		IF INDEXW(UPCASE(CLEANED_STRING), UPCASE(KEYWORD_STOCKS[I])) > 0 THEN DO;
			KEYWORD_FOUND = KEYWORD_STOCKS[I] ;
			SIN_STOCKS = 1;
		LEAVE;
		END;
	END;
	DROP I;
RUN;

/* STEP 14.4 : MERGING ABOVE FILE WITH ISIN AND SECID DATA */
%MERGE_CODE_1(INPUT_FILE_1=FILE_456, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=SIN_STOCKS);

/* REMOVING ALL DUPLICATE VALUES FROM THE DATASET BY SECID */
PROC SORT DATA = SIN_STOCKS NODUPKEY; BY SECID; RUN;

/* STEP 14.5 : CLEAN THE ABOVE MERGED FILE FOR ANY BLANKS */
DATA SIN_STOCKS_1 ;
	SET SIN_STOCKS;
	BY SECID;
	IF NOT MISSING (SECID) ;
	DROP cleaned_string		keyword_found ;
RUN;

/* STEP 14.6 : MERGING ABOVE FILE WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=SIN_STOCKS_1, SORT_VARS=SECID, OUTPUT_FILE=NZD_DATASET_FINAL);

/* CHECK IF MERGED OR NOT */
/*DATA FILE_33;
	SET NZD_DATASET_FINAL;
	WHERE BUSINESS_SECTOR_COMBINED NE "";
RUN;*/

 /*DATA HOLDINGS.NZD_DATASET_FINAL ;
	SET NZD_DATASET_FINAL ;
RUN;*/


/* *************************************************************************************** STEP 15 ******************************************************************************************* */
/* **************************************************************** CALCULATING STOCKS WITH ESGSCORE >75 AND SIN_STOCKS = 0 ************************************************** */

/* STEP 15.1 : CREATING TEMP DATASET FROM LIBRARY */
PROC SORT DATA = HOLDINGS.nzd_hd_all_final OUT = NZD_HD_ALL_FINAL; BY SECID; RUN;

/* STEP 15.2 : MERGING ABOVE DATASETS WITH SIN_STOCKS DATASETS. */
%MERGE_CODE_1(INPUT_FILE_1=NZD_HD_ALL_FINAL, INPUT_FILE_2=SIN_STOCKS_1, SORT_VARS=SECID, OUTPUT_FILE=NZD_HD_ALL_FINAL); 

/* STEP 15.3 : FILTERING EQUITY DATA FROM DATASET */
PROC SQL;
	CREATE TABLE HOLDINGS_EQUITY AS
	SELECT DISTINCT *
	FROM NZD_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
QUIT;
RUN;

/* STEP 15.4 : FILTERING DATA WHERE ESGSCORE >= 75 */
DATA TEST_12;  
  SET HOLDINGS_EQUITY ; 
  BY FUNDID YEAR MONTH;
  IF ESGSCORE >= 75 AND sin_stocks = 0 THEN 
      NEWSCORE = 1;       
    ELSE 
      NEWSCORE = 0; 
RUN; 

/* STEP 15.6 : COUNTING NO OF EQUITIES IN EACH FUND MONTH YEAR WHICH HAVE ESGSCORE >= 75 */
PROC SQL;								/* RUN PROC SQL, TOTAL NO OF FUNDS WHICH HAVE ESGSCORE GE 75 IS 384 */
	CREATE TABLE TEST_987 AS
	SELECT DISTINCT  FUNDID, YEAR, MONTH, COUNT(*) AS ESGGE75_NZD_EQUITY
	FROM TEST_12
	WHERE NEWSCORE = 1
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP 15.7 : CREATING FUNDLEVEL DATASET FOR RATIO VALUES */
PROC SQL;
	CREATE TABLE FUNDLEVEL_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ESGHOLDINGS_EQUITY_NZD
	FROM NZD_DATASET_FINAL
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP 15.8 : CREATING RATIO VARIABLE */
PROC SORT DATA = TEST_987; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_SET; BY FUNDID YEAR MONTH; RUN; 

DATA FUNDLEVEL_SET_2;
	MERGE FUNDLEVEL_SET ( IN = A ) TEST_987 ( IN = B );
	BY FUNDID YEAR MONTH;
	RATIO_ESG75_HLDSEQ_NZD = ESGGE75_NZD_EQUITY / ESGHOLDINGS_EQUITY_NZD;
	DROP ESGHOLDINGS_EQUITY_NZD BINARYVAR;
RUN;

/* STEP 15.9 : MERGE ABOVE DATASET WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FUNDLEVEL_SET_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* ********************** CALCULATING WEIGHTS FOR ESGSCORE GE 75 **************************** */
/* STEP 15.10 : FILTERING DATA FROM NZD_HD_ALL_FINAL WHERE ESGSCORE IS GE 75 */
DATA TEST_21; 
	SET TEST_12;
	WHERE NEWSCORE	= 1 ;
	KEEP FUNDID YEAR MONTH SECID NAME DETAILHOLDINGTYPE NUMBEROFSHARES ;
RUN;

/* STEP 15.11 : SELECTING DATASET FROM NZD_DATASET_FINAL ESGSCORE IS GE 75 AND NOT SIN_STOCKS */
DATA TEST_54; 
	SET NZD_DATASET_FINAL;
	WHERE ESGSCORE >= 75 AND sin_stocks = 0 ;
	KEEP FUNDID YEAR MONTH SECID PERCENTHOLDINGS BINARYVAR CAPITAL_INVESTED_PER_HOLDING DECOMPOSED_STK_RET ESGSCORE MONTHLYRETURNS; 
RUN;

PROC SORT DATA = TEST_54 ; BY FUNDID YEAR MONTH SECID; RUN;
PROC SORT DATA = TEST_21 ; BY FUNDID YEAR MONTH SECID; RUN; 

DATA ESGGE75_DATA ;
	MERGE TEST_54 ( IN = A ) TEST_21 ( IN = B ) ;
	BY FUNDID YEAR MONTH SECID;
	IF A AND B ;
RUN;

/* STEP 15.12 : CREATING SUMMARY STATS FROM ABOVE DATASET */
PROC SUMMARY DATA = ESGGE75_DATA;
	BY FUNDID YEAR MONTH ;
	VAR CAPITAL_INVESTED_PER_HOLDING ;
	OUTPUT OUT = GHJKL 		
	SUM (CAPITAL_INVESTED_PER_HOLDING) = ESGGE75_CAP_INV_NZD 
	SUM (PERCENTHOLDINGS) = ESGGE75_SUM_WT_NZD 
	SUM (DECOMPOSED_STK_RET) = ESGGE75_VW_RETURNS_NZD ;
RUN;

/* STEP 15.13 : MERGING ABOVE DATASET WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=GHJKL, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 15.14 : UPDATING PERMANENT DATASET IN THE LIBRARY */
/* DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_ _FREQ_;
RUN; */


/* *************************************************************************************** STEP 15 ******************************************************************************************* */
/* ************************************************************************ CALCULATING TRACKING ERROR ************************************************************************************** */

/* STEP 15.1 : MERGE ACTIVE SHARES DATA WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=File_set.Activeshares_trans_123, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 15.2 : MERGING MORNINGSTAR INDEXID AND OTHER DATASETS WITH NZD_DATASET_FINAL */
%IMPORT_MACROS(INPUTFILE='C:\USERS\EM18921\DOWNLOADS\FILE_1.CSV', 
			   OUTPUT_FILE=FILE_SET.FUND_DETAILS);

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FILE_SET.FUND_DETAILS, SORT_VARS=FUNDID, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 15.3 : MERGING MORNINGSTAR INDEX RETURNS */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=File_set.Index_returns, SORT_VARS=Morningstar_Index_Id YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 15.4 : CREATING DISTINCT DATASET AT FUNDLEVEL */
PROC SQL;
	CREATE TABLE FUNDLEVEL_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1, MORNINGSTAR_INDEX_ID, INDEX_RETURNS1, FIRM_NAME
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP 15.5 : CALCULATING TRACKING ERROR */
DATA TE_SETUP1; 
	SET FUNDLEVEL_SET; 
	AB_RET = Fundreturns_NZD1 - INDEX_RETURNS1 ; 
RUN; 

PROC SORT DATA=TE_SETUP1; BY FUNDID; RUN; 

PROC EXPAND DATA=TE_SETUP1  OUT = TE_SETUP2 METHOD=NONE;   
	BY FUNDID ; 
	CONVERT AB_RET = TRACK_ERROR / TRANSFORMOUT=(NOMISS MOVSTD 12 TRIMLEFT 11 );/**ROLLING 12 MONTH STDEV OF ABNORMAL_RETURNS**/ 
RUN; 

/* STEP 15.6 : CALCULATING MEDIAN OF TRACKING ERROR */
%PROC_SUMMARY_OVERALL(INPUT_FILE=TE_SETUP2, CLASS_VARS=YEAR MONTH, VARIABLES=TRACK_ERROR, OUTPUT_FILE=TE_SETUP_MEDIAN, STATS_OPS=MEDIAN, CALCULATED_VAR=MEDIAN_TE);

/* STEP 15.7 : CREATING LAG TRACKING ERROR */
PROC SORT DATA = TE_SETUP_MEDIAN ; BY YEAR MONTH; RUN; 
PROC EXPAND DATA=TE_SETUP2  OUT = TE_SETUP3 METHOD=NONE;   
	BY FUNDID;
	CONVERT TRACK_ERROR = LAG_TRACK_ERROR / TRANSFORM=(LAG 1); 
RUN; 

/* STEP 15.8 : CREATING ALPHA GENERATION FLAG */
PROC SORT DATA = TE_SETUP3 OUT = TE_SETUP4;  BY YEAR MONTH; RUN; 
DATA FUND_TRACKINGERROR; 
	MERGE TE_SETUP4 (IN = A) TE_SETUP_MEDIAN (IN = B); 
	BY YEAR MONTH; 
	IF A; 
	IF LAG_TRACK_ERROR > MEDIAN_TE THEN ACTIVE_ALPHA = 1; /*GREATER THAN MEDIAN THAN ACTIVE*/ 
	ELSE ACTIVE_ALPHA = 0; 
	IF LAG_TRACK_ERROR =. THEN ACTIVE_ALPHA = .;  
	ELSE ACTIVE_ALPHA =ACTIVE_ALPHA ; 
	DROP _FREQ_ TIME Fundreturns_NZD1 Firm_Name _TYPE_ INDEX_RETURNS1 Morningstar_Index_Id;
RUN; 

/* STEP 15.9 : MERGING ABOVE DATASETS WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FUND_TRACKINGERROR, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/* *************************************************************************************** STEP 16 ******************************************************************************************* */
/* ************************************************************************ CREATING TIME VARYING VARIABLES ************************************************************************************** */
/* RUN ESSENTIAL MACROS NEEDED IN THE PROGRAM */

/* FILTERING DATA FOR THE VARIABLES REQUIRED */
PROC SQL;
	CREATE TABLE DATA_12 AS
	SELECT FUNDID, YEAR, MONTH, SECID, Percentholdings, Fundreturns_NZD1, Netassets_NZD, ESG, BINARYVAR, CAPITAL_INVESTED_PER_HOLDING, SUM(CAPITAL_INVESTED_PER_HOLDING) AS SUM_CAP_INVESTED
	FROM NZD_DATASET_FINAL
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* CREATING FORWARD VAR(T+1) FOR MONTHLYRETURNS AND MERGING THIS FILE WITH ABOVE DATASET */

%CREATE_FORWARD_VAR(INPUT_FILE=FILE_SET.MONTHLYRETURNS_DATA, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=MONTHYLYRETURNS_3, VAR_TOBE_CARRY=monthlyreturns, FILTER_VAR=SECID);

/* CLEANING DATASET WHERE SECID IS MISSING */
DATA RETURNS_1;
	SET MONTHYLYRETURNS_3;
	WHERE NOT MISSING(SECID);
RUN;

/* MERGING MONTHLYRETURNS AND MONTHLYRETURNS_FRWRD VALUES IN MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=DATA_12, INPUT_FILE_2=RETURNS_1, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=TEMP_FILE);

/* CREATING Wm VARIABLE OF A SECID HOLDINGS IN ALL FUND PORTFOLIO IN GIVEN MONTH AND YEAR */
/*CLEANING DATA, REMOVING ROWS WHERE MONTHLYRETURNS IS MISSING */
PROC SQL;
	CREATE TABLE DATA_909 AS
	SELECT *, COUNT(SECID) AS STK_FREQUENCY, SUM(Percentholdings) AS SUM_OF_ALL_HLDGS, SUM(CAPITAL_INVESTED_PER_HOLDING) AS TOTAL_CAP_INV_IN_STK
	FROM TEMP_FILE
	WHERE NOT MISSING(MONTHLYRETURNS)
	GROUP BY SECID, YEAR, MONTH;
QUIT;

PROC SORT DATA = DATA_909; BY SECID YEAR MONTH; RUN;

DATA FILE_81;
	SET DATA_909;
	BY SECID YEAR MONTH;
	IF CAPITAL_INVESTED_PER_HOLDING NE 0 THEN DO;
		MKT_WT_EXCL = TOTAL_CAP_INV_IN_STK - CAPITAL_INVESTED_PER_HOLDING;		/* STEP 2 VARIABLE */
		AVG_WT_EXCL = CAPITAL_INVESTED_PER_HOLDING / MKT_WT_EXCL;				/* STEP 2 VARIABLE */
	END;
	IF STK_FREQUENCY NE 1 AND SECID NE 'B' THEN DO;
		MKT_AVG_WT_OF_STK = (SUM_OF_ALL_HLDGS-Percentholdings)/(STK_FREQUENCY-1);	/* STEP 1 VARIABLE */
	END;
RUN;

/*CREATING CARRY FORWARD VAR FOR NZX50 MONTHLYRETURNS */
%CREATE_FORWARD_VAR(INPUT_FILE=Fund_set.NZX50returns_nzd, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=INDEX_RETURNS, VAR_TOBE_CARRY=NZX50returns_NZD1, FILTER_VAR=FUNDID);

/* MERGING INDEXRETURNS DATA WITH HOLDINGS LEVEL DATASET */			
%MERGE_CODE_1(INPUT_FILE_1=FILE_81, INPUT_FILE_2=INDEX_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=CALS_DATA);

/* SUBTRACTING Wm FROM Wj - THIS CODE CAN BE DONE IN ABOVE STEP, BUT DOING IT SEPARATELY FOR CLARIFICATION AND MAKING DATA IN LIBRAY TO EXPORT TO STATA*/
PROC SORT DATA = CALS_DATA; BY FUNDID YEAR MONTH; RUN;

DATA TIME_VARY_DATA;
	SET CALS_DATA;
	BY FUNDID YEAR MONTH;
	Wx = MKT_AVG_WT_OF_STK - Percentholdings;		/* STEP 1 VARIABLE: Wx = Wj - WM */		
RUN;

PROC SORT DATA = TIME_VARY_DATA OUT = Fund_set.TIME_VARY_DATA; BY SECID YEAR MONTH; RUN;		/*CREATING PERMANENT DATASET IN DRIVE AND THIS DATASET WILL BE USED TO IMPORT TO STATA */

/* CREATING DATASET TO IMPORT TO STATA */
DATA FUND_SET.TIME_VARY_STATA;
	SET TIME_VARY_DATA;
	KEEP FUNDID SECID YEAR MONTH monthlyreturns NZX50returns_NZD1_FRWRD;
RUN; 

/*IMPORTING FILE FROM STATA*/
%IMPORT_MACRO(INPUT_FILE='R:\SAS - RESEARCH\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\SUPPORTING_FILES\BETA_FILE_123.DTA', DBMS_TYPE=DTA, OUTPUT_DATASET=BETA_105);
PROC SORT DATA = BETA_105; BY FUNDID SECID YEAR MONTH; RUN;
PROC CONTENTS DATA = BETA_105; RUN;
 
/* MERGING THE DATA WITH TIME VARYING FUND DATA*/	
%MERGE_CODE_1(INPUT_FILE_1=TIME_VARY_DATA, INPUT_FILE_2=BETA_105, SORT_VARS=FUNDID SECID YEAR MONTH, OUTPUT_FILE=FILE_8091);

/* CREATING FORWARD BETA FOR CALCULATIOSN */
PROC SORT DATA = FILE_8091; BY SECID YEAR MONTH; RUN;

PROC SQL;
	CREATE TABLE FILE_990 AS
	SELECT DISTINCT SECID, YEAR, MONTH, BETA
	FROM FILE_8091
	GROUP BY SECID, YEAR, MONTH;
RUN;

%CREATE_FORWARD_VAR(INPUT_FILE=FILE_990, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=FILE_300, VAR_TOBE_CARRY=BETA, FILTER_VAR=SECID);

DATA FILE_303;
	SET FILE_300;
	DROP BETA;
RUN;
	
%MERGE_CODE_1(INPUT_FILE_1=FILE_8091, INPUT_FILE_2=FILE_303, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=FILE_900);

/* CALCULATING TIME AND PICKING VARIABLES */
DATA STEP_1;
	SET FILE_900;
	TIMING_PER_STOCK = (Percentholdings - Wx)*(BETA_FRWRD*NZX50returns_NZD1_FRWRD);									/* STEP 1 VARIABLE: ALL VARIABLES ARE IN PERCENTAGE*/
	PICKING_PER_STOCK = (Percentholdings - Wx)*(monthlyreturns_FRWRD - (BETA_FRWRD*NZX50returns_NZD1_FRWRD));	/* STEP 1 VARIABLE: ALL VARIABLES ARE IN PERCENTAGE */         
RUN;

/* MERGING ABOVE DATASET WITH NZD_DATASET_FINAL */
DATA TEMP_1;	/*Fund_set.TIME_VARY_DATA*/
	SET STEP_1;
	KEEP FUNDID SECID YEAR MONTH beta BETA_FRWRD NZX50returns_NZD1 TIMING_PER_STOCK PICKING_PER_STOCK;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TEMP_1, SORT_VARS=FUNDID SECID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/* ******************************************************************************** INTERMEDIATE STEP ******************************************************************************************* */
/* ************************************************************************ CREATING FUND LEVEL DATASET ************************************************************************************** */
DATA TEMP_DATASET;
	SET NZD_DATASET_FINAL;
	DROP SecID Name Percentholdings RICCODE ESGSCORE ISIN ESG_CONTROVERSY monthlyreturns STOCK_WEIGHT_DECIMAL DECOMPOSED_STK_RET CAPITAL_INVESTED_PER_HOLDING ESG Business_Sector_Name Business_Sector_combined
		 SIN_STOCKS beta BETA_FRWRD TIMING_PER_STOCK PICKING_PER_STOCK Country_of_Exchange Country_of_Headquarters Country_ISO Instrument_Type NZX50returns_NZD1;
RUN;

PROC SQL;
	CREATE TABLE HOLDINGS.FUNDLEVEL_DATASET AS
	SELECT DISTINCT *
	FROM TEMP_DATASET;
QUIT;

/* ******************************************************************************** INTERMEDIATE STEP COMPLETE ********************************************************************************* */


/* CALCULATING SUM OF NET ASSETS */
%PROC_SUMMARY_OVERALL(INPUT_FILE=HOLDINGS.FUNDLEVEL_DATASET, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=DATA_801, STATS_OPS=SUM, CALCULATED_VAR=SUM_NETASSETS);

/* MERGING MAIN DATASET WITH ABOVE FILE */	
%MERGE_CODE_1(INPUT_FILE_1=STEP_1, INPUT_FILE_2=DATA_801, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_066);

/* CALCULATING VALUE WEIGHTED MARKET WEIGHT */
PROC SORT DATA = FILE_066; BY SECID YEAR MONTH; RUN;

%PROC_SUMMARY_WEIGHT(INPUT_FILE=FILE_066, WEIGHT_VAR=Netassets_NZD, CLASS_VARS=SECID YEAR MONTH, VARIABLES=AVG_WT_EXCL, OUTPUT_FILE=FILE_09990, STATS_OPS=MEAN, CALCULATED_VAR=MEAN_AVG_WT_EXCL_VW);
					
%PROC_SUMMARY_OVERALL(INPUT_FILE=FILE_066, CLASS_VARS=SECID YEAR MONTH, VARIABLES=AVG_WT_EXCL, OUTPUT_FILE=FILE_09933, STATS_OPS=MEAN, CALCULATED_VAR=MEAN_AVG_WT_EXCL_EW);	                 /* STEP 3 VARIABLE: EQ_MKT */

/* MERGING BOTH THE DATASETS WITH FILE_066 DATASETS */
%MERGE_CODE_1(INPUT_FILE_1=FILE_09990, INPUT_FILE_2=FILE_09933, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=TEMP_FILE_6);	
%MERGE_CODE_1(INPUT_FILE_1=FILE_066, INPUT_FILE_2=TEMP_FILE_6, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=PICKING_FILE);	

/* CREATING MAIN DATASETS IN THE MEMORY */

/*DATA HOLDINGS.FUND_MANAGER_SKILL;
	SET PICKING_FILE;
	DROP _TYPE_ _FREQ_ modate;
RUN;*/

/* TAKING AVERAGE OF THE TIMING VARIABLE */

/* STEP 5 VARIABLE: TIMING_EW, PICKING_EW */
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK, OUTPUT_FILE=EW_DATA_SKILL_1, STATS_OPS=MEAN, CALCULATED_VAR=FUND_TIMING_EW);
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK, OUTPUT_FILE=EW_DATA_SKILL_2, STATS_OPS=MEAN, CALCULATED_VAR=FUND_PICKING_EW);

%MERGE_CODE_1(INPUT_FILE_1=EW_DATA_SKILL_1, INPUT_FILE_2=EW_DATA_SKILL_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=EW_DATASET);	

/* STEP 5 VARIABLE: TIMING_VW, PICKING_VW */
%PROC_SUMMARY_WEIGHT(INPUT_FILE=PICKING_FILE, WEIGHT_VAR=CAPITAL_INVESTED_PER_HOLDING, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK, OUTPUT_FILE=VW_DATA_SKILL_1, STATS_OPS=MEAN, CALCULATED_VAR=FUND_TIMING_VW);
%PROC_SUMMARY_WEIGHT(INPUT_FILE=PICKING_FILE, WEIGHT_VAR=CAPITAL_INVESTED_PER_HOLDING, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK, OUTPUT_FILE=VW_DATA_SKILL_2, STATS_OPS=MEAN, CALCULATED_VAR=FUND_PICKING_VW);

%MERGE_CODE_1(INPUT_FILE_1=VW_DATA_SKILL_1, INPUT_FILE_2=VW_DATA_SKILL_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=VW_DATASET);	

/* MERGING THIS WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=EW_DATASET, INPUT_FILE_2=VW_DATASET, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=TIMING_FILE);

/* MERGING WITH FUNDLEVEL DATASET */	
%MERGE_CODE_1(INPUT_FILE_1=HOLDINGS.FUNDLEVEL_DATASET, INPUT_FILE_2=TIMING_FILE, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET);

/* REWRITING PERMANENT DATASET IN LIBRARY */
DATA HOLDINGS.FUNDLEVEL_DATASET;
	SET FUNDLEVEL_DATASET;
	DROP _TYPE_ _FREQ_ MEAN_TIMING_EW MEAN_PICKING_EW MEAN_TIMING_VW ;
RUN;

/* MERGING AND REWRITING HOLDINGS LEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TIMING_FILE, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_ _FREQ_;
RUN;*/

/* CREATING BACKUP FILE IN LIBRARYY */
/*%MERGE_CODE_1(INPUT_FILE_1=STEP_1, INPUT_FILE_2=TIMING_FILE, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=HOLDINGS.MANAGER_SKILL);*/


/* *************************************************************************************** STEP 17 ******************************************************************************************* */
/* ************************************************************************ NON NZ STOCKS ************************************************************************************** */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Exchange_info.CSV',
			   OUTPUT_FILE=COUNTRY_EXCHANGE);
PROC SORT DATA = COUNTRY_EXCHANGE NODUPKEY; BY RICCODE; RUN;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Country_of_HQ.CSV',
			   OUTPUT_FILE=Country_of_HQ);
PROC SORT DATA = Country_of_HQ NODUPKEY; BY RICCODE; RUN;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\ISO_CODE_NZD.CSV',
			   OUTPUT_FILE=ISO_CODE_NZD);
PROC SORT DATA = ISO_CODE_NZD NODUPKEY; BY RICCODE; RUN;

%MERGE_CODE_1(INPUT_FILE_1=COUNTRY_EXCHANGE, INPUT_FILE_2=Country_of_HQ, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_1);	

%MERGE_CODE_1(INPUT_FILE_1=TEMP_FILE_1, INPUT_FILE_2=ISO_CODE_NZD, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_2);	

%MERGE_CODE_1(INPUT_FILE_1=FILE_SET.RIC_CODE, INPUT_FILE_2=TEMP_FILE_2, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_3);	

PROC SORT DATA = TEMP_FILE_3 OUT = FILE_SET.STOCKS_EXCHANGE_FILE NODUPKEY; BY SECID; RUN;

DATA NZ_HD_ALL_FINAL;
	SET HOLDINGS.NZD_HD_ALL_FINAL;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZ_HD_ALL_FINAL, INPUT_FILE_2=FILE_SET.STOCKS_EXCHANGE_FILE, SORT_VARS=SECID, OUTPUT_FILE=NZ_HD_ALL_FINAL);	

/* CREATING DATASET FOR EQUITY STOCKS ONLY */
PROC SQL;
	CREATE TABLE DATA_123 AS
	SELECT *
	FROM NZ_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
RUN;

/* COUNTING NON NZ STOCKS ON BASIS OF ISO CODE */
PROC SQL;
    CREATE TABLE COUNT_12 AS
    SELECT FUNDID, YEAR, MONTH, COUNT(*) AS NON_NZ_STOCKS
    FROM DATA_123
    WHERE Country_of_Exchange NE 'New Zealand' AND Country_of_Exchange NE 'NEW ZEALAND EXCHANGE LTD'
    GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* MERGING ABOVE DATASET WITH FUNDLEVEL DATASET AND CREATING RATIO */
PROC SORT DATA = HOLDINGS.fundlevel_dataset	OUT = fundlevel_dataset ; BY FUNDID YEAR MONTH ; RUN;
PROC SORT DATA = COUNT_12 ; BY FUNDID YEAR MONTH ; RUN ;

DATA fundlevel_dataset ;
	MERGE fundlevel_dataset ( IN = A ) 	COUNT_12 ( IN = B ) ;
	BY FUNDID YEAR MONTH ;
	IF A;
	NON_NZ_STOCK_RATIO =  NON_NZ_STOCKS / COMPONENT_HOLDINGS_NZD ;
RUN;

/* MERGING ABOVE DATASET WITH NZ_HD_ALL_FINAL */
DATA NON_NZ_STOCKS;
	SET fundlevel_dataset;
	KEEP FUNDID YEAR MONTH NON_NZ_STOCKS NON_NZ_STOCK_RATIO;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZ_HD_ALL_FINAL, INPUT_FILE_2=NON_NZ_STOCKS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZ_HD_ALL_FINAL);	

/* MERGING ABOVE DATASET AND STOCK EXCHANGE INFO WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=Nzd_dataset_final, INPUT_FILE_2=FILE_SET.STOCKS_EXCHANGE_FILE, SORT_VARS=SECID, OUTPUT_FILE=Nzd_dataset_final);	

%MERGE_CODE_1(INPUT_FILE_1=Nzd_dataset_final, INPUT_FILE_2=NON_NZ_STOCKS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=Nzd_dataset_final);	


/* *************************************************************************************** STEP 18 ********************************************************************************** */
/* ********************************************************************* CREATING FLAGS FOR STYLE BOXES ***************************************************************************** */
/* STEP 1: REMOVING SPACES IN BETWEEN CHARACTERS FROM EQUITY LONG BOX DATA */
DATA EQUITY_LONG_BOX;
	SET FILE_SET.EQUITY_LONG_BOX;
	WHERE EQUITY_STYLE_BOX_LONG NE '';
	EQUITY_LONG_BOX = COMPRESS(EQUITY_STYLE_BOX_LONG, ' ');
	DROP EQUITY_STYLE_BOX_LONG;
RUN;

/* STEP 2: SELECT DISTINCT EQUITY_LONG_BOX VALUES FROM ABOVE DATA */
PROC SQL NOPRINT; 
        SELECT DISTINCT EQUITY_LONG_BOX
        INTO :COL_NAMES SEPARATED BY ' '
        FROM EQUITY_LONG_BOX
		WHERE EQUITY_LONG_BOX NE '';
QUIT;

%PUT &COL_NAMES;

/* STEP 3 : CREATING COLUMNS OF THE ABOVE DATASET */
DATA BOX_1;
    SET EQUITY_LONG_BOX;
    ARRAY COLS {*} &COL_NAMES.;
    DO i = 1 TO DIM(COLS);
        COLS{i} = 0;
    END;
    IF EQUITY_LONG_BOX NE '' THEN DO;
        ARRAY BOXES {*} &COL_NAMES.;
        DO j = 1 TO DIM(BOXES);
            IF EQUITY_LONG_BOX = VNAME(BOXES{j}) THEN BOXES{j} = 1;
        END;
    END;
    DROP i j;
RUN;

/* STEP 4 : MERGING EQUITY BOX WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=fundlevel_dataset, INPUT_FILE_2=BOX_1, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=fundlevel_dataset);	

/* STEP 5 : REWRITING PERMANENT DATASET IN LIBRARY */
/*DATA Holdings.Nzd_hd_all_final;
	SET Nz_hd_all_final;
RUN;*/ 

/*DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_ _FREQ_;
RUN;*/

/* *************************************************************************************** STEP 19 ********************************************************************************** */
/* ********************************************************************************* ESG TILT EXCLUSIVE ***************************************************************************** */
PROC SQL;
    CREATE TABLE DATA_12 AS
    SELECT FUNDID, YEAR, MONTH, NZD_ESG_WT_OF_FUND, SUM(NZD_ESG_WT_OF_FUND)AS ESG_WT_SUM, COUNT (FUNDID) AS FUNDID_COUNT
    FROM fundlevel_dataset
	WHERE NZD_ESG_WT_OF_FUND NE . 
	GROUP BY YEAR, MONTH;
QUIT;

DATA DATA_27;
    SET DATA_12;
    FUND_ESG_WT_EXCLUSIVE = (ESG_WT_SUM - NZD_ESG_WT_OF_FUND) / (FUNDID_COUNT - 1);
	KEEP FUNDID YEAR MONTH FUNDID_COUNT FUND_ESG_WT_EXCLUSIVE NZD_ESG_WT_OF_FUND;
RUN;

%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_27, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_ESG_WT_EXCLUSIVE, OUTPUT_FILE=ESG_TILT_EX_AVG, STATS_OPS=MEAN, CALCULATED_VAR=INDUSTRY_ESG_WT_EXCL);

%MERGE_CODE_1(INPUT_FILE_1=DATA_27, INPUT_FILE_2=ESG_TILT_EX_AVG, SORT_VARS=YEAR MONTH, OUTPUT_FILE=DATA_30);

DATA DATA_33;
    SET DATA_30;
    ESG_TILT_EXCLUSIVE_NZD = FUND_ESG_WT_EXCLUSIVE - INDUSTRY_ESG_WT_EXCL;		/*DISCUSS WHETHER IT SHOULD BE THIS OR NOT - NZD_ESG_WT_OF_FUND */
	KEEP FUNDID YEAR MONTH FUNDID_COUNT ESG_TILT_EXCLUSIVE_NZD INDUSTRY_ESG_WT_EXCL FUND_ESG_WT_EXCLUSIVE;
RUN;

/* MERGE WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=fundlevel_dataset, INPUT_FILE_2=DATA_33, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=fundlevel_dataset);

/* CALCULATING MONTHLY AVERAGE AND MERGING WITH FUNDLEVEL DATASET */
%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_33, CLASS_VARS=YEAR MONTH, VARIABLES=ESG_TILT_EXCLUSIVE_NZD, OUTPUT_FILE=ESG_TILT_EX_AVGERAGE, STATS_OPS=MEAN, CALCULATED_VAR=INDUSTRY_ESG_TILT_EXCL);

%MERGE_CODE_1(INPUT_FILE_1=fundlevel_dataset, INPUT_FILE_2=ESG_TILT_EX_AVGERAGE, SORT_VARS=YEAR MONTH, OUTPUT_FILE=fundlevel_dataset);

/* REWRITING PERMANENT DATASET IN LIBRARY */	
/*DATA Holdings.fundlevel_dataset;
	SET fundlevel_dataset;
RUN;*/

/* MERGING ESG_TILT_EXCLUSIVE WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=Nzd_dataset_final, INPUT_FILE_2=DATA_33, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=Nzd_dataset_final);	
%MERGE_CODE_1(INPUT_FILE_1=Nzd_dataset_final, INPUT_FILE_2=ESG_TILT_EX_AVGERAGE, SORT_VARS=YEAR MONTH, OUTPUT_FILE=Nzd_dataset_final);	

/*DATA HOLDINGS.NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_ _FREQ_;
RUN;*/


/* *************************************************************************************** STEP 20 ********************************************************************************** */
/* ********************************************************************************* CREATING DATASETS FROM MASTER DATASET ********************************************************** */
/* CREARTING DATASET FOR FUNDLEVEL VARIABLES */
DATA FUNDLEVEL_VARIABLES;
	SET holdings.fundlevel_dataset;
	DROP FUNDRETURNS_NZD1_AVG KS_Fundreturns_NZD1_AVG Fundreturns_NZD1_AVG_VW KS_Fundreturns_NZD1_AVG_VW AVG_VW_ESG_RETURNS_DECOMP KS_AVG_VW_ESG_RET_DECOMP AVG_VW_NON_ESG_RET_DECOMP KS_AVG_VW_NON_ESG_RET_DECOMP 
		 TOT_AUM_MON_NZD AVG_AUM_MON_NZD KS_AVG_AUM_MON_NZD ESG_TOT_AUM_MON_NZD ESG_AVG_AUM_MON_NZD ESG_TOT_AUM_MON_NZD ESG_AVG_AUM_MON_NZD KS_ESG_TOT_AUM_MON_NZD KS_ESG_AVG_AUM_MON_NZD INDUSTRY_AVG_ESG_WT_NZD 
		 INDUSTRY_ESG_TILT_NZD KS_INDUSTRY_AVG_ESG_WT_NZD AVG_ESG_HOLDINGS_EQUITY_NZD KS_AVG_ESG_HOLDINGS_EQUITY_NZD AVG_TOTAL_HOLDINGS_EQUITY_NZD KS_AVG_TOTAL_HOLDINGS_EQUITY_NZD AVG_COMPONENT_HOLDINGS_NZD 
		 KS_AVG_COMPONENT_HOLDINGS_NZD AVG_RATIO_ESG_TO_TOT_EQUITY_NZD KS_AVG_RT_ESG_TO_TOT_EQUITY_NZD AVG_RT_ESG_TO_TOT_HOLDINGS_NZD KS_AVG_RT_ESG_TO_TOT_HLDG_NZD AVG_ESG_FLOW_PERCENT_NZD KS_AVG_ESG_FLOW_PERCENT_NZD 
         AVG_ESG_FLOW_PERCENT_WIN_NZD KS_ESG_AVG_FLOW_PERCENT_WIN_NZD AVG_FLOW_PERCENT_NZD KS_AVG_FLOW_PERCENT_NZD AVG_FLOW_PERCENT_DECOMP_NZD KS_AVG_FLOW_PRCNT_NZD_DECOMP AVG_FLOW_PRCNT_WIN_NZD_DECOMP 
         KS_AVG_FLOW_PRCNT_WIN_NZD_DECMP AVG_ROLLING_VOLATILITY_NZD KS_AVG_ROLLING_VOLATILITY_NZD AVG_FLOW_PERCENT_WIN_NZD KS_AVG_FLOW_PERCENT_WIN_NZD INDUSTRY_ESG_WT_EXCL INDUSTRY_ESG_TILT_EXCL _TYPE_ _FREQ_ KS_TOT_AUM_MON_NZD
		 KS_INDUSTRY_ESG_TILT_NZD;
RUN;

/* CREATING PERMANENT FUNDLEVEL VARIBALES DATASET IN LIBRARY */
/*DATA HOLDINGS.FUNDLEVEL_VARIABELS;
	SET FUNDLEVEL_VARIABLES;
RUN;*/

/* CREARTING DATASET FOR YEARLEVEL VARIABLES */
DATA YEARLEVEL_VARIABLES;
	SET fundlevel_dataset;
	KEEP YEAR MONTH FUNDRETURNS_NZD1_AVG KS_Fundreturns_NZD1_AVG Fundreturns_NZD1_AVG_VW KS_Fundreturns_NZD1_AVG_VW AVG_VW_ESG_RETURNS_DECOMP KS_AVG_VW_ESG_RET_DECOMP AVG_VW_NON_ESG_RET_DECOMP KS_AVG_VW_NON_ESG_RET_DECOMP 
		 TOT_AUM_MON_NZD AVG_AUM_MON_NZD KS_AVG_AUM_MON_NZD ESG_TOT_AUM_MON_NZD ESG_AVG_AUM_MON_NZD ESG_TOT_AUM_MON_NZD ESG_AVG_AUM_MON_NZD KS_ESG_TOT_AUM_MON_NZD KS_ESG_AVG_AUM_MON_NZD INDUSTRY_AVG_ESG_WT_NZD 
		 INDUSTRY_ESG_TILT_NZD KS_INDUSTRY_AVG_ESG_WT_NZD AVG_ESG_HOLDINGS_EQUITY_NZD KS_AVG_ESG_HOLDINGS_EQUITY_NZD AVG_TOTAL_HOLDINGS_EQUITY_NZD KS_AVG_TOTAL_HOLDINGS_EQUITY_NZD AVG_COMPONENT_HOLDINGS_NZD 
		 KS_AVG_COMPONENT_HOLDINGS_NZD AVG_RATIO_ESG_TO_TOT_EQUITY_NZD KS_AVG_RT_ESG_TO_TOT_EQUITY_NZD AVG_RT_ESG_TO_TOT_HOLDINGS_NZD KS_AVG_RT_ESG_TO_TOT_HLDG_NZD AVG_ESG_FLOW_PERCENT_NZD KS_AVG_ESG_FLOW_PERCENT_NZD 
         AVG_ESG_FLOW_PERCENT_WIN_NZD KS_ESG_AVG_FLOW_PERCENT_WIN_NZD AVG_FLOW_PERCENT_NZD KS_AVG_FLOW_PERCENT_NZD AVG_FLOW_PERCENT_DECOMP_NZD KS_AVG_FLOW_PRCNT_NZD_DECOMP AVG_FLOW_PRCNT_WIN_NZD_DECOMP 
         KS_AVG_FLOW_PRCNT_WIN_NZD_DECMP AVG_ROLLING_VOLATILITY_NZD KS_AVG_ROLLING_VOLATILITY_NZD AVG_FLOW_PERCENT_WIN_NZD KS_AVG_FLOW_PERCENT_WIN_NZD INDUSTRY_ESG_WT_EXCL INDUSTRY_ESG_TILT_EXCL _TYPE_ _FREQ_ KS_TOT_AUM_MON_NZD
		 KS_INDUSTRY_ESG_TILT_NZD;
RUN;

PROC SQL;
	CREATE TABLE YEARLEVEL_DATASET AS
	SELECT DISTINCT *
	FROM YEARLEVEL_VARIABLES
	WHERE INDUSTRY_AVG_ESG_WT_NZD NE .;
QUIT;

/* CREATING PERMANENT DATASET IN THE LIBRARY */
/*DATA HOLDINGS.YEARLEVEL_DATASET;
	SET YEARLEVEL_DATASET;
RUN;*/

/* CREARTING DATASET FOR HOLDINGS VARIABLES */
DATA HOLDINGS_VARIABLES;
	SET Nzd_dataset_final;
	KEEP Fundname FundID SecID Name Percentholdings Fileno DATE_NUM MONTH YEAR Binaryvar RICCODE ESGSCORE ISIN ESG_CONTROVERSY monthlyreturns Fundreturns_NZD1 Netassets_NZD STOCK_WEIGHT_DECIMAL DECOMPOSED_STK_RET 
	     CAPITAL_INVESTED_PER_HOLDING ESG YY_MON Liq_month Liq_year LIQ_YR_MON LIQUIDATED ALIVE Business_Sector_Name Business_Sector_combined SIN_STOCKS Global_Broad_Category_Group Morningstar_Index Morningstar_Index_Id 
         Firm_Name TIMING_PER_STOCK PICKING_PER_STOCK beta BETA_FRWRD Country_of_Exchange Country_of_Headquarters Country_ISO Instrument_Type NON_NZ_STOCKS;
RUN;

/* CREATING PERMANENT DATASET IN LIBRARY */
/*DATA HOLDINGS.HOLDINGS_VARIABLES_FINAL;
	SET HOLDINGS_VARIABLES;
RUN;*/

/* *************************************************************************************** STEP 21 ********************************************************************************** */
/* ********************************************************************************* TABLE 7TH AUGUST ***************************************************************************** */

/* ************************************* OVERALL *************************************** */
PROC MEANS DATA = fundlevel_dataset  MEAN MEDIAN MIN MAX STDDEV N ;
VAR	 Fundreturns_NZD1 Netassets_NZD AB_RET FUNDRETURNS_VW_DECOMP Netassets_NZD FUND_TIMING_VW FUND_PICKING_VW SUM_ESG_CAPITAL_NZD ESGGE75_CAP_INV_NZD NZD_ESG_WT_OF_FUND ESGGE75_SUM_WT_NZD NON_NZ_STOCK_RATIO VW_ESG_RETURNS 
	 VW_NON_ESG_RETURNS RATIO_ESG_TO_TOT_EQUITY_NZD RATIO_ESG75_HLDSEQ_NZD FLOW_PERCENT_WIN_NZD ESG_FLOW_PERCENT_WIN_NZD COMPONENT_HOLDINGS_NZD TOTALHOLDINGS_EQUITY_NZD ESG_TILT_EXCLUSIVE_NZD;						
RUN;

/* ************************************* KIWISAVER *************************************** */
PROC MEANS DATA=fundlevel_dataset MEAN MEDIAN MIN MAX STDDEV N;
WHERE BINARYVAR = 1;
VAR	 Fundreturns_NZD1 Netassets_NZD AB_RET FUNDRETURNS_VW_DECOMP Netassets_NZD FUND_TIMING_VW FUND_PICKING_VW SUM_ESG_CAPITAL_NZD ESGGE75_CAP_INV_NZD NZD_ESG_WT_OF_FUND ESGGE75_SUM_WT_NZD NON_NZ_STOCK_RATIO VW_ESG_RETURNS 
	 VW_NON_ESG_RETURNS RATIO_ESG_TO_TOT_EQUITY_NZD RATIO_ESG75_HLDSEQ_NZD FLOW_PERCENT_WIN_NZD ESG_FLOW_PERCENT_WIN_NZD COMPONENT_HOLDINGS_NZD TOTALHOLDINGS_EQUITY_NZD ESG_TILT_EXCLUSIVE_NZD;						
RUN;

/* ************************************* OPEN END *************************************** */
PROC MEANS DATA=fundlevel_dataset MEAN MEDIAN MIN MAX STDDEV N;
WHERE BINARYVAR = 3;
VAR	 Fundreturns_NZD1 Netassets_NZD AB_RET FUNDRETURNS_VW_DECOMP Netassets_NZD FUND_TIMING_VW FUND_PICKING_VW SUM_ESG_CAPITAL_NZD ESGGE75_CAP_INV_NZD NZD_ESG_WT_OF_FUND ESGGE75_SUM_WT_NZD NON_NZ_STOCK_RATIO VW_ESG_RETURNS 
	 VW_NON_ESG_RETURNS RATIO_ESG_TO_TOT_EQUITY_NZD RATIO_ESG75_HLDSEQ_NZD FLOW_PERCENT_WIN_NZD ESG_FLOW_PERCENT_WIN_NZD COMPONENT_HOLDINGS_NZD TOTALHOLDINGS_EQUITY_NZD ESG_TILT_EXCLUSIVE_NZD;						
RUN;


/* *************************************************************************************** STEP 22 ********************************************************************************** */
/* ***************************************************************************** TABLE 7TH AUGUST - GRAPH DATASET******************************************************************** */
%PROC_SUMMARY_OVERALL(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_TIMING_VW, OUTPUT_FILE=AVG_TIMING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_TIMING_MONTHLY);
%PROC_SUMMARY_OVERALL(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_PICKING_VW, OUTPUT_FILE=AVG_PICKING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_PICKING_MONTHLY);
%MERGE_CODE_1(INPUT_FILE_1=AVG_TIMING_MONTHLY, INPUT_FILE_2=AVG_PICKING_MONTHLY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=WANT_1);
DATA GRAPHS_OVERALL ;
SET WANT_1;
KEY = YEAR||MONTH;
DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_TIMING_VW, OUTPUT_FILE=AVG_TIMING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_TIMING_MONTHLY);
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_PICKING_VW, OUTPUT_FILE=AVG_PICKING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_PICKING_MONTHLY);
%MERGE_CODE_1(INPUT_FILE_1=AVG_TIMING_MONTHLY, INPUT_FILE_2=AVG_PICKING_MONTHLY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=WANT_2);
DATA GRAPHS_KIWISAVER ;
SET WANT_2;
KEY = YEAR||MONTH;
DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;

/* OPEN END FUND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_TIMING_VW, OUTPUT_FILE=AVG_TIMING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_TIMING_MONTHLY);
%PROC_SUMMARY_OPENEND(INPUT_FILE=fundlevel_dataset, CLASS_VARS=YEAR MONTH, VARIABLES=FUND_PICKING_VW, OUTPUT_FILE=AVG_PICKING_MONTHLY, STATS_OPS=MEAN, CALCULATED_VAR=AVG_PICKING_MONTHLY);
%MERGE_CODE_1(INPUT_FILE_1=AVG_TIMING_MONTHLY, INPUT_FILE_2=AVG_PICKING_MONTHLY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=WANT_3);
DATA GRAPHS_OPENEND ;
SET WANT_3;
KEY = YEAR||MONTH;
DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;
